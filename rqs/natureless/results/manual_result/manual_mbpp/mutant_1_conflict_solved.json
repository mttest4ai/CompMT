{
   "mbpp_14": {
      "prompt": "def volume_cuboid_then_find_Volume(l, b, l_0, w_0, h_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def volume_cuboid(l, w, h):\n            '''Write a function to find the volume of a cuboid.'''\n\n    as input for the 3rd parameter (h) of the function:\n\n        def find_Volume(l: int, b: int, h: int) -> int:\n            '''\n        \tWrite a python function to find the volume of a triangular prism.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert volume_cuboid(1,2,3)==6', 'assert volume_cuboid(5,7,9)==315', 'assert volume_cuboid(10,15,21)==3150']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_592": {
      "prompt": "def binomial_Coeff_then_sum_Of_product(n, k):\n    \"\"\"Create a function that takes the output of the function:\n\n        def binomial_Coeff(n, k):\n            '''Write a python function to find binomial co-efficient.'''\n\n    as input for the function:\n\n        def sum_Of_product(n: int) -> int:\n            '''\n        \tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert binomial_Coeff(5,2) == 10', 'assert binomial_Coeff(4,3) == 4', 'assert binomial_Coeff(3,2) == 3', 'assert binomial_Coeff(14,6) == 3003']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_474": {
      "prompt": "def remove_Char_then_replace_char(str1, ch, s_0, c_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_Char(s, c):\n            '''Write a python function to remove all occurrences of a character in a given string.'''\n\n    as input for the 3rd parameter (newch) of the function:\n\n        def replace_char(str1: str, ch: str, newch: str) -> str:\n            '''\n        \tWrite a function to replace characters in a string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_Char(\"aba\",\\'a\\') == \"b\"', 'assert remove_Char(\"toggle\",\\'g\\') == \"tole\"', 'assert remove_Char(\"aabbc\",\\'b\\') == \"aac\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_781": {
      "prompt": "def average_Even_then_count_divisors(n):\n    \"\"\"Create a function that takes the output of the function:\n\n        def average_Even(n):\n            '''Write a python function to find the average of even numbers till a given even number.'''\n\n    as input for the function:\n\n        def count_divisors(n: int) -> bool:\n            '''\n        \tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n        \t'''\n    \"\"\"",
      "comb_test": "['assert average_Even(2) == 2', 'assert average_Even(4) == 3', 'assert average_Even(100) == 51']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_261": {
      "prompt": "from typing import Tuple\ndef find_exponentio_then_division_elements(test_tup1, test_tup1_0, test_tup2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def find_exponentio(test_tup1, test_tup2):\n            '''Write a function to perform the exponentiation of the given two tuples.'''\n\n    as input for the 2nd parameter (test_tup2) of the function:\n\n        from typing import Tuple\n\n        def division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n            '''\n        \tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)', 'assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)', 'assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_297": {
      "prompt": "from typing import List, Union\ndef remove_column_then_flatten_list(list1_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_column(list1, n):\n            '''Write a function to remove a specified column from a given nested list.'''\n\n    as input for the 1st parameter (list1) of the function:\n\n        from typing import List, Union\n\n        def flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n            '''\n        \tWrite a function to flatten a given nested list structure.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]', 'assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]', 'assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_722": {
      "prompt": "from typing import Dict, Tuple\ndef min_difference_then_filter_data(students, h, test_list_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def min_difference(test_list):\n            '''Write a function to find the minimum difference in the tuple pairs of given tuples.'''\n\n    as input for the 3rd parameter (w) of the function:\n\n        from typing import Dict, Tuple\n\n        def filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n            '''\n        \tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1', 'assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2', 'assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_720": {
      "prompt": "from typing import Tuple, Dict\ndef merge_dict_then_add_dict_to_tuple(test_tup, d1_0, d2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def merge_dict(d1, d2):\n            '''Write a function to merge two dictionaries.'''\n\n    as input for the 2nd parameter (test_dict) of the function:\n\n        from typing import Tuple, Dict\n\n        def add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n            '''\n        \tWrite a function to add a dictionary to the tuple. The output should be a tuple.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\", \"assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\", \"assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_408": {
      "prompt": "from typing import List\ndef no_of_subsequences_then_k_smallest_pairs(nums1, nums2, arr_0, k_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def no_of_subsequences(arr, k):\n            '''Write a function to find the number of subsequences having product smaller than k for the given non negative array.'''\n\n    as input for the 3rd parameter (k) of the function:\n\n        from typing import List\n\n        def k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n            '''\n        \tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert no_of_subsequences([1,2,3,4], 10) == 11', 'assert no_of_subsequences([4,8,7,2], 50) == 9', 'assert no_of_subsequences([5,6,7,8], 15) == 4']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_166": {
      "prompt": "def remove_even_then_find_even_pair(l):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_even(l):\n            '''Write a python function to remove even numbers from a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def find_even_pair(A: List[int]) -> int:\n            '''\n        \tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_11": {
      "prompt": "def remove_Char_then_remove_Occ(s, s_0, c_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_Char(s, c):\n            '''Write a python function to remove all occurrences of a character in a given string.'''\n\n    as input for the 2nd parameter (ch) of the function:\n\n        def remove_Occ(s: str, ch: str) -> str:\n            '''\n        \tWrite a python function to remove first and last occurrence of a given character from the string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_Char(\"aba\",\\'a\\') == \"b\"', 'assert remove_Char(\"toggle\",\\'g\\') == \"tole\"', 'assert remove_Char(\"aabbc\",\\'b\\') == \"aac\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_257": {
      "prompt": "from typing import List\ndef count_digits_then_swap_numbers(a, num1_0, num2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def count_digits(num1, num2):\n            '''Write a function to add two numbers and print number of digits of sum.'''\n\n    as input for the 2nd parameter (b) of the function:\n\n        from typing import List\n\n        def swap_numbers(a: int, b: int) -> List[int]:\n            '''\n        \tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert count_digits(9875,10)==(4)', 'assert count_digits(98759853034,100)==(11)', 'assert count_digits(1234567,500)==(7)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_425": {
      "prompt": "from typing import List, Any\ndef most_occurrences_then_count_element_in_list(list1, test_list_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        from collections import defaultdict\n        def most_occurrences(test_list):\n            '''Write a function to get the word with most number of occurrences in the given strings list.'''\n\n    as input for the 2nd parameter (x) of the function:\n\n        from typing import List, Any\n\n        def count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n            '''\n        \tWrite a function to count the number of sublists containing a particular element.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == \\'UTS\\'', 'assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == \\'year\\'', 'assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == \\'can\\'']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_84": {
      "prompt": "def dealnnoy_num_then_sequence(n, m):\n    \"\"\"Create a function that takes the output of the function:\n\n        def dealnnoy_num(n, m):\n            '''Write a function to find the nth delannoy number.'''\n\n    as input for the function:\n\n        def sequence(n: int) -> int:\n            '''\n        \tWrite a function to find the nth number in the newman conway sequence.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert dealnnoy_num(3, 4) == 129', 'assert dealnnoy_num(3, 3) == 63', 'assert dealnnoy_num(4, 5) == 681']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_797": {
      "prompt": "def cube_Sum_then_sum_in_range(l, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def cube_Sum(n):\n            '''Write a python function to find the cube sum of first n odd natural numbers.'''\n\n    as input for the 2nd parameter (r) of the function:\n\n        def sum_in_range(l: int, r: int) -> int:\n            '''\n        \tWrite a python function to find the sum of all odd natural numbers within the range l and r.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert cube_Sum(2) == 28', 'assert cube_Sum(3) == 153', 'assert cube_Sum(4) == 496']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_9": {
      "prompt": "def check_Type_Of_Triangle_then_find_Rotations(a_0, b_0, c_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def check_Type_Of_Triangle(a, b, c):\n            '''Write a python function to find the type of triangle from the given sides.'''\n\n    as input for the 1st parameter (str) of the function:\n\n        def find_Rotations(str: str) -> int:\n            '''\n        \tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"', 'assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"', 'assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_128": {
      "prompt": "from typing import List\ndef most_occurrences_then_long_words(n, test_list_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        from collections import defaultdict\n        def most_occurrences(test_list):\n            '''Write a function to get the word with most number of occurrences in the given strings list.'''\n\n    as input for the 2nd parameter (str) of the function:\n\n        from typing import List\n\n        def long_words(n: int, str: str) -> List[str]:\n            '''\n        \tWrite a function to find words that are longer than n characters from a given list of words.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == \\'UTS\\'', 'assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == \\'year\\'', 'assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == \\'can\\'']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_560": {
      "prompt": "from typing import List\ndef combine_lists_then_union_elements(test_tup1, num1_0, num2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        from heapq import merge\n        def combine_lists(num1, num2):\n            '''Write a function to combine two given sorted lists using heapq module.'''\n\n    as input for the 2nd parameter (test_tup2) of the function:\n\n        from typing import List\n\n        def union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n            '''\n        \tWrite a function to find the union of the elements of two given lists and output them in sorted order.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]', 'assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]', 'assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_643": {
      "prompt": "def text_match_string_then_text_match_wordz_middle(text_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def text_match_string(text):\n            '''Write a function that matches a word at the beginning of a string.'''\n\n    as input for the 1st parameter (text) of the function:\n\n        def text_match_wordz_middle(text: str) -> bool:\n            '''\n        \tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert text_match_string(\" python\")==(\\'Not matched!\\')', 'assert text_match_string(\"python\")==(\\'Found a match!\\')', 'assert text_match_string(\"  lang\")==(\\'Not matched!\\')', 'assert text_match_string(\"foo\")==(\\'Found a match!\\')']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_238": {
      "prompt": "def check_substring_then_number_of_substrings(string_0, sample_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def check_substring(string, sample):\n            '''Write a function to check if the given string starts with a substring using regex.'''\n\n    as input for the 1st parameter (str) of the function:\n\n        def number_of_substrings(str: str) -> int:\n            '''\n        \tWrite a python function to count the number of non-empty substrings of a given string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == \\'string doesnt start with the given substring\\'', 'assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == \\'string starts with the given substring\\'', 'assert check_substring(\"Its been a long day\", \"been\") == \\'string doesnt start with the given substring\\'']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_765": {
      "prompt": "MAX = 3000\ndef smartNumber_then_is_polite(n):\n    \"\"\"Create a function that takes the output of the function:\n\n        MAX = 3000\n        def smartNumber(n):\n            '''Write a function to find n鈥檛h smart number.'''\n\n    as input for the function:\n\n        def is_polite(n: int) -> int:\n            '''\n        \tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert smartNumber(1) == 30', 'assert smartNumber(50) == 273', 'assert smartNumber(1000) == 2664']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_618": {
      "prompt": "from typing import List\ndef moddiv_list_then_div_list(nums1, nums1_0, nums2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def moddiv_list(nums1, nums2):\n            '''Write a function to find modulo division of two lists using map and lambda function.'''\n\n    as input for the 2nd parameter (nums2) of the function:\n\n        from typing import List\n\n        def div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n            '''\n        \tWrite a function to divide two lists element wise.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]', 'assert moddiv_list([3,2],[1,4])==[0, 2]', 'assert moddiv_list([90,120],[50,70])==[40, 50]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_106": {
      "prompt": "from typing import List, Tuple\ndef concatenate_nested_then_add_lists(test_list, test_tup1_0, test_tup2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def concatenate_nested(test_tup1, test_tup2):\n            '''Write a function to concatenate the given two tuples to a nested tuple.'''\n\n    as input for the 2nd parameter (test_tup) of the function:\n\n        from typing import List, Tuple\n\n        def add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n            '''\n        \tWrite a function to append the given list to the given tuples.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)', 'assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)', 'assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_640": {
      "prompt": "from typing import List\ndef split_upperstring_then_remove_parenthesis(text_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def split_upperstring(text):\n            '''Write a function to split a string at uppercase letters.'''\n\n    as input for the 1st parameter (items) of the function:\n\n        from typing import List\n\n        def remove_parenthesis(items: List[str]) -> str:\n            '''\n        \tWrite a function to remove the parenthesis and what is inbetween them from a string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert split_upperstring(\"PythonProgramLanguage\")==[\\'Python\\',\\'Program\\',\\'Language\\']', 'assert split_upperstring(\"PythonProgram\")==[\\'Python\\',\\'Program\\']', 'assert split_upperstring(\"ProgrammingLanguage\")==[\\'Programming\\',\\'Language\\']']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_251": {
      "prompt": "from typing import List\ndef text_match_string_then_insert_element(list, text_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def text_match_string(text):\n            '''Write a function that matches a word at the beginning of a string.'''\n\n    as input for the 2nd parameter (element) of the function:\n\n        from typing import List\n\n        def insert_element(list: List[str], element: str) -> List[str]:\n            '''\n        \tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert text_match_string(\" python\")==(\\'Not matched!\\')', 'assert text_match_string(\"python\")==(\\'Found a match!\\')', 'assert text_match_string(\"  lang\")==(\\'Not matched!\\')', 'assert text_match_string(\"foo\")==(\\'Found a match!\\')']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_6": {
      "prompt": "def set_Bit_Number_then_differ_At_One_Bit_Pos(a, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def set_Bit_Number(n):\n            '''Write a python function to find the most significant bit number which is also a set bit.'''\n\n    as input for the 2nd parameter (b) of the function:\n\n        def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n            '''\n        \tWrite a python function to check whether the two numbers differ at one bit position only or not.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert set_Bit_Number(6) == 4', 'assert set_Bit_Number(10) == 8', 'assert set_Bit_Number(18) == 16']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_457": {
      "prompt": "from typing import List, Any\ndef listify_list_then_Find_Min(list1_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def listify_list(list1):\n            '''Write a function to list out the list of given strings individually using map function.'''\n\n    as input for the 1st parameter (lst) of the function:\n\n        from typing import List, Any\n\n        def Find_Min(lst: List[List[Any]]) -> List[Any]:\n            '''\n        \tWrite a python function to find the sublist having minimum length.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\", \"assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\", \"assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_160": {
      "prompt": "from typing import Optional, Tuple\ndef mutiple_tuple_then_find_solution(a, b, nums_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def mutiple_tuple(nums):\n            '''Write a python function to calculate the product of all the numbers of a given tuple.'''\n\n    as input for the 3rd parameter (n) of the function:\n\n        from typing import Optional, Tuple\n\n        def find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n            '''\n        \tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864', 'assert mutiple_tuple((1,2,3)) == 6', 'assert mutiple_tuple((-2,-4,-6)) == -48']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_167": {
      "prompt": "def highest_Power_of_2_then_next_power_of_2(n):\n    \"\"\"Create a function that takes the output of the function:\n\n        def highest_Power_of_2(n):\n            '''Write a python function to find highest power of 2 less than or equal to given number.'''\n\n    as input for the function:\n\n        def next_power_of_2(n: int) -> int:\n            '''\n        \tWrite a python function to find the smallest power of 2 greater than or equal to n.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_61": {
      "prompt": "def binary_to_integer_then_count_Substrings(test_tup_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def binary_to_integer(test_tup):\n            '''Write a function to convert the given binary tuple to integer.'''\n\n    as input for the 1st parameter (s) of the function:\n\n        def count_Substrings(s: str) -> int:\n            '''\n        \tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\", \"assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\", \"assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'\"]",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_407": {
      "prompt": "def previous_palindrome_then_rearrange_bigger(num):\n    \"\"\"Create a function that takes the output of the function:\n\n        def previous_palindrome(num):\n            '''Write a function to find the previous palindrome of a specified number.'''\n\n    as input for the function:\n\n        from typing import Any\n\n        def rearrange_bigger(n: int) -> Any:\n            '''\n        \tWrite a function to create the next bigger number by rearranging the digits of a given number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert previous_palindrome(99)==88', 'assert previous_palindrome(1221)==1111', 'assert previous_palindrome(120)==111']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_79": {
      "prompt": "def even_or_odd_then_word_len(N_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def even_or_odd(N):\n            '''Write a python function to check whether the hexadecimal number is even or odd.'''\n\n    as input for the 1st parameter (s) of the function:\n\n        def word_len(s: str) -> bool:\n            '''\n        \tWrite a python function to check whether the length of the word is odd or not.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert even_or_odd(\"AB3454D\") ==\"Odd\"', 'assert even_or_odd(\"ABC\") == \"Even\"', 'assert even_or_odd(\"AAD\") == \"Odd\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_741": {
      "prompt": "def check_Equality_then_all_Characters_Same(str):\n    \"\"\"Create a function that takes the output of the function:\n\n        def check_Equality(str):\n            '''Write a python function to check whether the first and last characters of a given string are equal or not.'''\n\n    as input for the function:\n\n        def all_Characters_Same(s: str) -> bool:\n            '''\n        \tWrite a python function to check whether all the characters are same or not.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check_Equality(\"abcda\") == \"Equal\"', 'assert check_Equality(\"ab\") == \"Not Equal\"', 'assert check_Equality(\"mad\") == \"Not Equal\"']",
      "label1": 0,
      "label2": 1,
      "final_result": 0
   },
   "mbpp_239": {
      "prompt": "def find_longest_conseq_subseq_then_get_total_number_of_sequences(m, arr_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def find_longest_conseq_subseq(arr, n):\n            '''Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.'''\n\n    as input for the 2nd parameter (n) of the function:\n\n        def get_total_number_of_sequences(m: int, n: int) -> int:\n            '''\n        \tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3', 'assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4', 'assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_409": {
      "prompt": "def max_similar_indices_then_min_product_tuple(test_list1, test_list2):\n    \"\"\"Create a function that takes the output of the function:\n\n        def max_similar_indices(test_list1, test_list2):\n            '''Write a function to find the maximum of similar indices in two lists of tuples.'''\n\n    as input for the function:\n\n        from typing import List, Tuple\n\n        def min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n            '''\n        \tWrite a function to find the minimum product from the pairs of tuples within a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]', 'assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]', 'assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_641": {
      "prompt": "def dealnnoy_num_then_is_nonagonal(n, m):\n    \"\"\"Create a function that takes the output of the function:\n\n        def dealnnoy_num(n, m):\n            '''Write a function to find the nth delannoy number.'''\n\n    as input for the function:\n\n        def is_nonagonal(n: int) -> int:\n            '''\n        \tWrite a function to find the nth nonagonal number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert dealnnoy_num(3, 4) == 129', 'assert dealnnoy_num(3, 3) == 63', 'assert dealnnoy_num(4, 5) == 681']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_18": {
      "prompt": "def remove_Char_then_remove_dirty_chars(string, s_0, c_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_Char(s, c):\n            '''Write a python function to remove all occurrences of a character in a given string.'''\n\n    as input for the 2nd parameter (second_string) of the function:\n\n        def remove_dirty_chars(string: str, second_string: str) -> str:\n            '''\n        \tWrite a function to remove characters from the first string which are present in the second string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_Char(\"aba\",\\'a\\') == \"b\"', 'assert remove_Char(\"toggle\",\\'g\\') == \"tole\"', 'assert remove_Char(\"aabbc\",\\'b\\') == \"aac\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_404": {
      "prompt": "def min_of_two_then_minimum(a, x_0, y_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def min_of_two(x, y):\n            '''Write a function to find minimum of two numbers.'''\n\n    as input for the 2nd parameter (b) of the function:\n\n        def minimum(a: int, b: int) -> int:\n            '''\n        \tWrite a python function to find the minimum of two numbers.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert min_of_two(10,20)==10', 'assert min_of_two(19,15)==15', 'assert min_of_two(-10,-20)==-20']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_632": {
      "prompt": "def re_order_then_move_zero(A):\n    \"\"\"Create a function that takes the output of the function:\n\n        def re_order(A):\n            '''Write a function to move all zeroes to the end of the given array.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def move_zero(num_list: List[int]) -> List[int]:\n            '''\n        \tWrite a python function to move all zeroes to the end of the given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]', 'assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]', 'assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_296": {
      "prompt": "def counting_sort_then_get_Inv_Count(my_list):\n    \"\"\"Create a function that takes the output of the function:\n\n        def counting_sort(my_list):\n            '''Write a function to sort the given array by using counting sort.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def get_Inv_Count(arr: List[int]) -> int:\n            '''\n        \tWrite a python function to count inversions in an array.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_269": {
      "prompt": "def get_max_occuring_char_then_ascii_value(str1):\n    \"\"\"Create a function that takes the output of the function:\n\n        def get_max_occuring_char(str1):\n            '''Write a python function to find the maximum occurring character in a given string.'''\n\n    as input for the function:\n\n        def ascii_value(k: str) -> int:\n            '''\n        \tWrite a function to find the ascii value of a character.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert get_max_occuring_char(\"data\") == \"a\"', 'assert get_max_occuring_char(\"create\") == \"e\"', 'assert get_max_occuring_char(\"brilliant girl\") == \"i\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_259": {
      "prompt": "from typing import List\ndef reverse_list_lists_then_maximize_elements(test_tup1, lists_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def reverse_list_lists(lists):\n            '''Write a function to reverse each list in a given list of lists.'''\n\n    as input for the 2nd parameter (test_tup2) of the function:\n\n        from typing import List\n\n        def maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n            '''\n        \tWrite a function to maximize the given two lists.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]', 'assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]', 'assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_282": {
      "prompt": "from typing import List\ndef diff_consecutivenums_then_sub_list(nums1, nums_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def diff_consecutivenums(nums):\n            '''Write a function to find the difference between two consecutive numbers in a given list.'''\n\n    as input for the 2nd parameter (nums2) of the function:\n\n        from typing import List\n\n        def sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n            '''\n        \tWrite a function to subtract two lists element-wise.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]', 'assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]', 'assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_279": {
      "prompt": "def dealnnoy_num_then_is_num_decagonal(n, m):\n    \"\"\"Create a function that takes the output of the function:\n\n        def dealnnoy_num(n, m):\n            '''Write a function to find the nth delannoy number.'''\n\n    as input for the function:\n\n        def is_num_decagonal(n: int) -> int:\n            '''\n        \tWrite a function to find the nth decagonal number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert dealnnoy_num(3, 4) == 129', 'assert dealnnoy_num(3, 3) == 63', 'assert dealnnoy_num(4, 5) == 681']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_280": {
      "prompt": "from typing import List, Tuple\ndef first_then_sequential_search(dlist, arr_0, x_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def first(arr, x, n):\n            '''Write a python function to find the first position of an element in a sorted array.'''\n\n    as input for the 2nd parameter (item) of the function:\n\n        from typing import List, Tuple\n\n        def sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n            '''\n        \tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n        \t'''\n    \"\"\"",
      "comb_test": "['assert first([1,2,3,4,5,6,6],6,6) == 5', 'assert first([1,2,2,2,3,2,2,4,2],2,9) == 1', 'assert first([1,2,3],1,3) == 0']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_763": {
      "prompt": "from typing import List\ndef find_Min_Sum_then_find_min_diff(arr, a_0, b_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def find_Min_Sum(a, b, n):\n            '''Write a python function to find the minimum sum of absolute differences of two arrays.'''\n\n    as input for the 2nd parameter (n) of the function:\n\n        from typing import List\n\n        def find_min_diff(arr: List[int], n: int) -> int:\n            '''\n        \tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert find_Min_Sum([3,2,1],[2,1,3],3) == 0', 'assert find_Min_Sum([1,2,3],[4,5,6],3) == 9', 'assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_730": {
      "prompt": "from typing import List, Any\ndef remove_words_then_consecutive_duplicates(list1_0, removewords_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_words(list1, removewords):\n            '''Write a function to remove specific words from a given list.'''\n\n    as input for the 1st parameter (nums) of the function:\n\n        from typing import List, Any\n\n        def consecutive_duplicates(nums: List[Any]) -> List[Any]:\n            '''\n        \tWrite a function to remove consecutive duplicates of a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\", \"assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\", \"assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_800": {
      "prompt": "import re\ndef remove_spaces_then_remove_all_spaces(text):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def remove_spaces(text):\n            '''Write a function to remove multiple spaces in a string.'''\n\n    as input for the function:\n\n        def remove_all_spaces(text: str) -> str:\n            '''\n        \tWrite a function to remove all whitespaces from a string.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert remove_spaces('python  program')==('python program')\", \"assert remove_spaces('python   programming    language')==('python programming language')\", \"assert remove_spaces('python                     program')==('python program')\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_476": {
      "prompt": "import heapq as hq\ndef heap_queue_smallest_then_big_sum(nums, n):\n    \"\"\"Create a function that takes the output of the function:\n\n        import heapq as hq\n        def heap_queue_smallest(nums, n):\n            '''Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def big_sum(nums: List[int]) -> int:\n            '''\n        \tWrite a python function to find the sum of the largest and smallest value in a given array.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]', 'assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_57": {
      "prompt": "def position_max_then_find_Max_Num(list1):\n    \"\"\"Create a function that takes the output of the function:\n\n        def position_max(list1):\n            '''Write a function to find all index positions of the maximum values in a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def find_Max_Num(arr: List[int]) -> int:\n            '''\n        \tWrite a python function to find the largest number that can be formed with the given list of digits.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]', 'assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]', 'assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_395": {
      "prompt": "def check_Type_Of_Triangle_then_first_non_repeating_character(a, b, c):\n    \"\"\"Create a function that takes the output of the function:\n\n        def check_Type_Of_Triangle(a, b, c):\n            '''Write a python function to find the type of triangle from the given sides.'''\n\n    as input for the function:\n\n        from typing import Optional\n\n        def first_non_repeating_character(str1: str) -> Optional[str]:\n            '''\n        \tWrite a python function to find the first non-repeated character in a given string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"', 'assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"', 'assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_161": {
      "prompt": "from typing import List\ndef remove_even_then_remove_elements(list1, l_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_even(l):\n            '''Write a python function to remove even numbers from a given list.'''\n\n    as input for the 2nd parameter (list2) of the function:\n\n        from typing import List\n\n        def remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n            '''\n        \tWrite a function to remove all elements from a given list present in another list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_245": {
      "prompt": "def position_max_then_max_sum(list1):\n    \"\"\"Create a function that takes the output of the function:\n\n        def position_max(list1):\n            '''Write a function to find all index positions of the maximum values in a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def max_sum(arr: List[int]) -> int:\n            '''\n        \tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]', 'assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]', 'assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_723": {
      "prompt": "from typing import List\ndef add_list_then_count_same_pair(nums1, nums1_0, nums2_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def add_list(nums1, nums2):\n            '''Write a function to add two lists using map and lambda function.'''\n\n    as input for the 2nd parameter (nums2) of the function:\n\n        from typing import List\n\n        def count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n            '''\n        \tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]', 'assert add_list([1,2],[3,4])==[4,6]', 'assert add_list([10,20],[50,70])==[60,90]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_69": {
      "prompt": "from typing import List\ndef nth_items_then_is_sublist(l, list_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def nth_items(list, n):\n            '''Write a function to select the nth items of a list.'''\n\n    as input for the 2nd parameter (s) of the function:\n\n        from typing import List\n\n        def is_sublist(l: List[int], s: List[int]) -> bool:\n            '''\n        \tWrite a function to check whether a list contains the given sublist or not.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ', 'assert nth_items([10,15,19,17,16,18],3)==[10,17] ', 'assert nth_items([14,16,19,15,17],4)==[14,17]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_607": {
      "prompt": "from typing import Tuple\ndef check_substring_then_find_literals(text, string_0, sample_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def check_substring(string, sample):\n            '''Write a function to check if the given string starts with a substring using regex.'''\n\n    as input for the 2nd parameter (pattern) of the function:\n\n        from typing import Tuple\n\n        def find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n            '''\n        \tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == \\'string doesnt start with the given substring\\'', 'assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == \\'string starts with the given substring\\'', 'assert check_substring(\"Its been a long day\", \"been\") == \\'string doesnt start with the given substring\\'']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_778": {
      "prompt": "from typing import List, Any\ndef count_variable_then_pack_consecutive_duplicates(a_0, b_0, c_0, d_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        from collections import Counter\n        def count_variable(a, b, c, d):\n            '''Write a function to iterate over elements repeating each as many times as its count.'''\n\n    as input for the 1st parameter (list1) of the function:\n\n        from typing import List, Any\n\n        def pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n            '''\n        \tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \", \"assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \", \"assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\"]",
      "label1": 1,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_740": {
      "prompt": "def concatenate_nested_then_tuple_to_dict(test_tup1, test_tup2):\n    \"\"\"Create a function that takes the output of the function:\n\n        def concatenate_nested(test_tup1, test_tup2):\n            '''Write a function to concatenate the given two tuples to a nested tuple.'''\n\n    as input for the function:\n\n        from typing import Tuple, Dict\n\n        def tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n            '''\n        \tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)', 'assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)', 'assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_732": {
      "prompt": "def replace_max_specialchar_then_replace_specialchar(text_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def replace_max_specialchar(text, n):\n            '''Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.'''\n\n    as input for the 1st parameter (text) of the function:\n\n        def replace_specialchar(text: str) -> str:\n            '''\n        \tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\", \"assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\", \"assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_162": {
      "prompt": "def ap_sum_then_sum_series(a, n, d):\n    \"\"\"Create a function that takes the output of the function:\n\n        def ap_sum(a, n, d):\n            '''Write a function to find the sum of arithmetic progression.'''\n\n    as input for the function:\n\n        def sum_series(n: int) -> int:\n            '''\n        \tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n        \t'''\n    \"\"\"",
      "comb_test": "['assert ap_sum(1,5,2)==25', 'assert ap_sum(2,6,4)==72', 'assert ap_sum(1,4,5)==34']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_405": {
      "prompt": "from typing import List, Union, Any\ndef count_elim_then_check_tuplex(tuplex, num_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def count_elim(num):\n            '''Write a function to count the elements in a list until an element is a tuple.'''\n\n    as input for the 2nd parameter (tuple1) of the function:\n\n        from typing import List, Union, Any\n\n        def check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n            '''\n        \tWrite a function to check whether an element exists within a tuple.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert count_elim([10,20,30,(10,20),40])==3', 'assert count_elim([10,(20,30),(10,20),40])==1', 'assert count_elim([(10,(20,30,(10,20),40))])==0']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_250": {
      "prompt": "from typing import List\ndef count_elim_then_count_X(tup, num_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def count_elim(num):\n            '''Write a function to count the elements in a list until an element is a tuple.'''\n\n    as input for the 2nd parameter (x) of the function:\n\n        from typing import List\n\n        def count_X(tup: List[int], x: int) -> int:\n            '''\n        \tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert count_elim([10,20,30,(10,20),40])==3', 'assert count_elim([10,(20,30),(10,20),40])==1', 'assert count_elim([(10,(20,30,(10,20),40))])==0']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_760": {
      "prompt": "def remove_even_then_unique_Element(l):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_even(l):\n            '''Write a python function to remove even numbers from a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def unique_Element(arr: List[int]) -> bool:\n            '''\n        \tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_784": {
      "prompt": "def remove_even_then_mul_even_odd(l):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_even(l):\n            '''Write a python function to remove even numbers from a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def mul_even_odd(list1: List[int]) -> int:\n            '''\n        \tWrite a function to find the product of first even and odd number of a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_602": {
      "prompt": "from typing import Optional\ndef find_demlo_then_first_repeated_char(s_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def find_demlo(s):\n            '''Write a function to find the demlo number for the given number.'''\n\n    as input for the 1st parameter (str1) of the function:\n\n        from typing import Optional\n\n        def first_repeated_char(str1: str) -> Optional[str]:\n            '''\n        \tWrite a python function to find the first repeated character in a given string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert find_demlo(\"111111\") == \\'12345654321\\'', 'assert find_demlo(\"1111\") == \\'1234321\\'', 'assert find_demlo(\"13333122222\") == \\'123456789101110987654321\\'']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_594": {
      "prompt": "def diff_consecutivenums_then_diff_even_odd(nums):\n    \"\"\"Create a function that takes the output of the function:\n\n        def diff_consecutivenums(nums):\n            '''Write a function to find the difference between two consecutive numbers in a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def diff_even_odd(list1: List[int]) -> int:\n            '''\n        \tWrite a function to find the difference of the first even and first odd number of a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]', 'assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]', 'assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_131": {
      "prompt": "def check_then_reverse_vowels(string_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def check(string):\n            '''Write a python function to accept the strings which contains all vowels.'''\n\n    as input for the 1st parameter (str1) of the function:\n\n        def reverse_vowels(str1: str) -> str:\n            '''\n        \tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n        \t'''\n    \"\"\"",
      "comb_test": "['assert check(\"SEEquoiaL\") == \\'accepted\\'', 'assert check(\\'program\\') == \"not accepted\"', 'assert check(\\'fine\\') == \"not accepted\"']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_783": {
      "prompt": "from typing import List\ndef get_carol_then_rgb_to_hsv(r, g, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def get_carol(n):\n            '''Write a function to find the n鈥檛h carol number.'''\n\n    as input for the 3rd parameter (b) of the function:\n\n        from typing import List\n\n        def rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n            '''\n        \tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert get_carol(2) == 7', 'assert get_carol(4) == 223', 'assert get_carol(5) == 959']",
      "label1": 0.5,
      "label2": 0.5,
      "final_result": 0.5
   },
   "mbpp_435": {
      "prompt": "def last_Two_Digits_then_last_Digit(N):\n    \"\"\"Create a function that takes the output of the function:\n\n        def last_Two_Digits(N):\n            '''Write a python function to find the last two digits in factorial of a given number.'''\n\n    as input for the function:\n\n        def last_Digit(n: int) -> int:\n            '''\n        \tWrite a python function to find the last digit of a given number.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert last_Two_Digits(7) == 40', 'assert last_Two_Digits(5) == 20', 'assert last_Two_Digits(2) == 2']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_630": {
      "prompt": "def sum_of_alternates_then_get_coordinates(test_tuple):\n    \"\"\"Create a function that takes the output of the function:\n\n        def sum_of_alternates(test_tuple):\n            '''Write a function to extract the sum of alternate chains of tuples.'''\n\n    as input for the function:\n\n        from typing import Tuple, List\n\n        def get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n            '''\n        \tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)', 'assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)', 'assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_809": {
      "prompt": "from typing import Tuple\ndef extract_min_max_then_check_smaller(test_tup1, test_tup_0, K_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def extract_min_max(test_tup, K):\n            '''Write a function to extract maximum and minimum k elements in the given tuple.'''\n\n    as input for the 2nd parameter (test_tup2) of the function:\n\n        from typing import Tuple\n\n        def check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n            '''\n        \tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)', 'assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)', 'assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_569": {
      "prompt": "def listify_list_then_sort_sublists(list1):\n    \"\"\"Create a function that takes the output of the function:\n\n        def listify_list(list1):\n            '''Write a function to list out the list of given strings individually using map function.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n            '''\n        \tWrite a function to sort each sublist of strings in a given list of lists.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\", \"assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\", \"assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_807": {
      "prompt": "def remove_even_then_first_odd(l):\n    \"\"\"Create a function that takes the output of the function:\n\n        def remove_even(l):\n            '''Write a python function to remove even numbers from a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def first_odd(nums: List[int]) -> int:\n            '''\n        \tWrite a python function to find the first odd number in a given list of numbers.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert remove_even([1,3,5,2]) == [1,3,5]', 'assert remove_even([5,6,7]) == [5,7]', 'assert remove_even([1,2,3,4]) == [1,3]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_742": {
      "prompt": "def parallelogram_area_then_area_tetrahedron(b, h):\n    \"\"\"Create a function that takes the output of the function:\n\n        def parallelogram_area(b, h):\n            '''Write a function to caluclate area of a parallelogram.'''\n\n    as input for the function:\n\n        def area_tetrahedron(side: int) -> float:\n            '''\n        \tWrite a function to caluclate the area of a tetrahedron.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert parallelogram_area(10,20)==200', 'assert parallelogram_area(15,20)==300', 'assert parallelogram_area(8,9)==72']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_426": {
      "prompt": "def filter_evennumbers_then_filter_oddnumbers(nums):\n    \"\"\"Create a function that takes the output of the function:\n\n        def filter_evennumbers(nums):\n            '''Write a function to filter even numbers using lambda function.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def filter_oddnumbers(nums: List[int]) -> List[int]:\n            '''\n        \tWrite a function to filter odd numbers.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]', 'assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]', 'assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]']",
      "label1": 0,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_595": {
      "prompt": "from typing import Any\ndef binary_to_integer_then_min_Swaps(str1, test_tup_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def binary_to_integer(test_tup):\n            '''Write a function to convert the given binary tuple to integer.'''\n\n    as input for the 2nd parameter (str2) of the function:\n\n        from typing import Any\n\n        def min_Swaps(str1: str, str2: str) -> Any:\n            '''\n        \tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\", \"assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\", \"assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'\"]",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_780": {
      "prompt": "def add_K_element_then_find_combinations(test_list, K):\n    \"\"\"Create a function that takes the output of the function:\n\n        def add_K_element(test_list, K):\n            '''Write a function to add the k elements to each element in the tuple.'''\n\n    as input for the function:\n\n        from typing import List, Tuple\n\n        def find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n            '''\n        \tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]', 'assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]', 'assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_101": {
      "prompt": "from typing import List\ndef get_Number_then_kth_element(arr, n_0, k_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def get_Number(n, k):\n            '''Write a python function to find the kth element in an array containing odd elements first and then even elements.'''\n\n    as input for the 2nd parameter (k) of the function:\n\n        from typing import List\n\n        def kth_element(arr: List[int], k: int) -> int:\n            '''\n        \tWrite a function to find the kth element in the given array using 1-based indexing.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert get_Number(8,5) == 2', 'assert get_Number(7,2) == 3', 'assert get_Number(5,2) == 3']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_400": {
      "prompt": "def chunk_tuples_then_extract_freq(test_tup, N):\n    \"\"\"Create a function that takes the output of the function:\n\n        def chunk_tuples(test_tup, N):\n            '''Write a function to perform chunking of tuples each of size n.'''\n\n    as input for the function:\n\n        from typing import List, Tuple\n\n        def extract_freq(test_list: List[Tuple[int, int]]) -> int:\n            '''\n        \tWrite a function to extract the number of unique tuples in the given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]', 'assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]', 'assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_798": {
      "prompt": "def counting_sort_then__sum(my_list):\n    \"\"\"Create a function that takes the output of the function:\n\n        def counting_sort(my_list):\n            '''Write a function to sort the given array by using counting sort.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def _sum(arr: List[int]) -> int:\n            '''\n        \tWrite a python function to find the sum of an array.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]', 'assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]', 'assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_610": {
      "prompt": "from typing import List\ndef min_Ops_then_remove_kth_element(list1, arr_0, n_0, k_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def min_Ops(arr, n, k):\n            '''Write a python function to find k number of operations required to make all elements equal.'''\n\n    as input for the 2nd parameter (L) of the function:\n\n        from typing import List\n\n        def remove_kth_element(list1: List[int], L: int) -> List[int]:\n            '''\n        \tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert min_Ops([2,2,2,2],4,3) == 0', 'assert min_Ops([4,2,6,8],4,3) == -1', 'assert min_Ops([21,33,9,45,63],5,6) == 24']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_796": {
      "prompt": "from collections import Counter\ndef add_dict_then_return_sum(d1, d2):\n    \"\"\"Create a function that takes the output of the function:\n\n        from collections import Counter\n        def add_dict(d1, d2):\n            '''Write a function to combine two dictionaries by adding values for common keys.'''\n\n    as input for the function:\n\n        from typing import Dict\n\n        def return_sum(dict: Dict[str, int]) -> int:\n            '''\n        \tWrite function to find the sum of all items in the given dictionary.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \", \"assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \", \"assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_130": {
      "prompt": "def position_max_then_max_occurrences(list1):\n    \"\"\"Create a function that takes the output of the function:\n\n        def position_max(list1):\n            '''Write a function to find all index positions of the maximum values in a given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def max_occurrences(nums: List[int]) -> int:\n            '''\n        \tWrite a function to find the item with maximum frequency in a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]', 'assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]', 'assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_253": {
      "prompt": "from typing import List, Union\ndef access_elements_then_count_integer(nums_0, list_index_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def access_elements(nums, list_index):\n            '''Write a python function to access multiple elements of specified index from a given list.'''\n\n    as input for the 1st parameter (list1) of the function:\n\n        from typing import List, Union\n\n        def count_integer(list1: List[Union[int, str, float]]) -> int:\n            '''\n        \tWrite a python function that returns the number of integer elements in a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]', 'assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]', 'assert access_elements([1,0,2,3],[0,1]) == [1,0]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_446": {
      "prompt": "from typing import Any, List\ndef lcopy_then_count_Occurrence(tup, xs_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def lcopy(xs):\n            '''Write a python function to copy a list from a singleton tuple.'''\n\n    as input for the 2nd parameter (lst) of the function:\n\n        from typing import Any, List\n\n        def count_Occurrence(tup: Any, lst: List[Any]) -> int:\n            '''\n        \tWrite a python function to count the occurence of all elements of list in a tuple.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert lcopy([1, 2, 3]) == [1, 2, 3]', 'assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]', 'assert lcopy([4, 5, 6]) == [4, 5, 6]\\n']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_120": {
      "prompt": "def max_similar_indices_then_max_product_tuple(test_list1, test_list2):\n    \"\"\"Create a function that takes the output of the function:\n\n        def max_similar_indices(test_list1, test_list2):\n            '''Write a function to find the maximum of similar indices in two lists of tuples.'''\n\n    as input for the function:\n\n        from typing import List, Tuple\n\n        def max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n            '''\n        \tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]', 'assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]', 'assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_223": {
      "prompt": "from typing import List\ndef first_Element_then_is_majority(arr, n, arr_0, n_0, k_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def first_Element(arr, n, k):\n            '''Write a python function to find the first element occurring k times in a given array.'''\n\n    as input for the 3rd parameter (x) of the function:\n\n        from typing import List\n\n        def is_majority(arr: List[int], n: int, x: int) -> bool:\n            '''\n        \tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n        \t'''\n    \"\"\"",
      "comb_test": "['assert first_Element([0,1,2,3,4,5],6,1) == 0', 'assert first_Element([1,2,1,3,4],5,2) == 1', 'assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_12": {
      "prompt": "def generate_matrix_then_sort_matrix(n):\n    \"\"\"Create a function that takes the output of the function:\n\n        def generate_matrix(n):\n            '''Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def sort_matrix(M: List[List[int]]) -> List[List[int]]:\n            '''\n        \tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ', 'assert generate_matrix(2)==[[1,2],[4,3]]', 'assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_626": {
      "prompt": "def area_trapezium_then_triangle_area(base1, base2, height):\n    \"\"\"Create a function that takes the output of the function:\n\n        def area_trapezium(base1, base2, height):\n            '''Write a function to find the area of a trapezium.'''\n\n    as input for the function:\n\n        from typing import Optional\n\n        def triangle_area(r: int) -> Optional[int]:\n            '''\n        \tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert area_trapezium(6,9,4)==30', 'assert area_trapezium(10,20,30)==450', 'assert area_trapezium(15,25,35)==700']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_748": {
      "prompt": "import re\ndef text_match_string_then_capital_words_spaces(text):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def text_match_string(text):\n            '''Write a function that matches a word at the beginning of a string.'''\n\n    as input for the function:\n\n        def capital_words_spaces(str1: str) -> str:\n            '''\n        \tWrite a function to put spaces between words starting with capital letters in a given string.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert text_match_string(\" python\")==(\\'Not matched!\\')', 'assert text_match_string(\"python\")==(\\'Found a match!\\')', 'assert text_match_string(\"  lang\")==(\\'Not matched!\\')', 'assert text_match_string(\"foo\")==(\\'Found a match!\\')']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_771": {
      "prompt": "def Check_Solution_then_check_expression(a, b, c):\n    \"\"\"Create a function that takes the output of the function:\n\n        def Check_Solution(a, b, c):\n            '''Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.'''\n\n    as input for the function:\n\n        def check_expression(exp: str) -> bool:\n            '''\n        \tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n        \t'''\n    \"\"\"",
      "comb_test": "['assert Check_Solution(2,0,-1) == \"Yes\"', 'assert Check_Solution(1,-5,6) == \"No\"', 'assert Check_Solution(2,0,2) == \"Yes\"']",
      "label1": 0,
      "label2": 0,
      "final_result": 0
   },
   "mbpp_625": {
      "prompt": "def move_first_then_swap_List(test_list):\n    \"\"\"Create a function that takes the output of the function:\n\n        def move_first(test_list):\n            '''Write a python function to shift last element to first position in the given list.'''\n\n    as input for the function:\n\n        from typing import List\n\n        def swap_List(newList: List[int]) -> List[int]:\n            '''\n        \tWrite a python function to interchange the first and last element in a given list.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert move_first([1,2,3,4]) == [4,1,2,3]', 'assert move_first([0,1,2,3]) == [3,0,1,2]', 'assert move_first([9,8,7,1]) == [1,9,8,7]']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_310": {
      "prompt": "from typing import List\ndef remove_spaces_then_string_to_tuple(text_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def remove_spaces(text):\n            '''Write a function to remove multiple spaces in a string.'''\n\n    as input for the 1st parameter (str1) of the function:\n\n        from typing import List\n\n        def string_to_tuple(str1: str) -> List[str]:\n            '''\n        \tWrite a function to convert a given string to a list of characters.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert remove_spaces('python  program')==('python program')\", \"assert remove_spaces('python   programming    language')==('python programming language')\", \"assert remove_spaces('python                     program')==('python program')\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_597": {
      "prompt": "from typing import List\ndef get_Number_then_find_kth(arr1, arr2, n_0, k_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def get_Number(n, k):\n            '''Write a python function to find the kth element in an array containing odd elements first and then even elements.'''\n\n    as input for the 3rd parameter (k) of the function:\n\n        from typing import List\n\n        def find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n            '''\n        \tWrite a function to find kth element from the given two sorted arrays.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert get_Number(8,5) == 2', 'assert get_Number(7,2) == 3', 'assert get_Number(5,2) == 3']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_388": {
      "prompt": "def highest_Power_of_2_then_highest_Power_of_2(n):\n    \"\"\"Create a function that takes the output of the function:\n\n        def highest_Power_of_2(n):\n            '''Write a python function to find highest power of 2 less than or equal to given number.'''\n\n    as input for the function:\n\n        def highest_Power_of_2(n: int) -> int:\n            '''\n        \tWrite a python function to find the highest power of 2 that is less than or equal to n.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']",
      "label1": 0,
      "label2": 1,
      "final_result": 0
   },
   "mbpp_230": {
      "prompt": "def remove_spaces_then_replace_blank(str1, text_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def remove_spaces(text):\n            '''Write a function to remove multiple spaces in a string.'''\n\n    as input for the 2nd parameter (char) of the function:\n\n        def replace_blank(str1: str, char: str) -> str:\n            '''\n        \tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n        \t'''\n    \"\"\"",
      "comb_test": "[\"assert remove_spaces('python  program')==('python program')\", \"assert remove_spaces('python   programming    language')==('python programming language')\", \"assert remove_spaces('python                     program')==('python program')\"]",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_585": {
      "prompt": "from typing import List, Dict, Union\ndef max_occurrences_then_expensive_items(items, list1_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def max_occurrences(list1):\n            '''Write a function to find the item with maximum occurrences in a given list.'''\n\n    as input for the 2nd parameter (n) of the function:\n\n        from typing import List, Dict, Union\n\n        def expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n            '''\n        \tWrite a function to find the n most expensive items in a given dataset.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2', 'assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1', 'assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_564": {
      "prompt": "from typing import List\ndef count_Pairs_then_count_Pairs(arr, arr_0, n_0):\n    \"\"\"Create a function that takes the output of the function:\n\n        def count_Pairs(arr, n):\n            '''Write a python function to count equal element pairs from the given array.'''\n\n    as input for the 2nd parameter (n) of the function:\n\n        from typing import List\n\n        def count_Pairs(arr: List[int], n: int) -> int:\n            '''\n        \tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert count_Pairs([1,1,1,1],4) == 6', 'assert count_Pairs([1,5,1],3) == 1', 'assert count_Pairs([3,2,1,7,8,9],6) == 0']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_441": {
      "prompt": "def surfacearea_cuboid_then_surfacearea_cube(l, w, h):\n    \"\"\"Create a function that takes the output of the function:\n\n        def surfacearea_cuboid(l, w, h):\n            '''Write a function to find the surface area of a cuboid.'''\n\n    as input for the function:\n\n        def surfacearea_cube(l: int) -> int:\n            '''\n        \tWrite a function to find the surface area of a cube of a given size.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert surfacearea_cuboid(1,2,3)==22', 'assert surfacearea_cuboid(5,7,9)==286', 'assert surfacearea_cuboid(10,15,21)==1350']",
      "label1": 1,
      "label2": 1,
      "final_result": 1
   },
   "mbpp_440": {
      "prompt": "import re\ndef text_match_string_then_find_adverb_position(text):\n    \"\"\"Create a function that takes the output of the function:\n\n        import re\n        def text_match_string(text):\n            '''Write a function that matches a word at the beginning of a string.'''\n\n    as input for the function:\n\n        from typing import Tuple\n\n        def find_adverb_position(text: str) -> Tuple[int, int, str]:\n            '''\n        \tWrite a function to find the first adverb and their positions in a given sentence.\n        \t'''\n    \"\"\"",
      "comb_test": "['assert text_match_string(\" python\")==(\\'Not matched!\\')', 'assert text_match_string(\"python\")==(\\'Found a match!\\')', 'assert text_match_string(\"  lang\")==(\\'Not matched!\\')', 'assert text_match_string(\"foo\")==(\\'Found a match!\\')']",
      "label1": 0,
      "label2": 1,
      "final_result": 0
   }
}