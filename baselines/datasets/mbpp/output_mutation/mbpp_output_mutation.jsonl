{"task_id": "mbpp_464", "name": "mbpp_464_check_value", "language": "py", "prompt": "from typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary. Change all bool type values of the return values to int type, and add 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12,\n        'Kierra Gentry': 12, 'Pierre Cox': 12}, 10) == 6\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12,\n        'Kierra Gentry': 12, 'Pierre Cox': 12}, 12) == 7\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12,\n        'Kierra Gentry': 12, 'Pierre Cox': 12}, 5) == 6\n\n\ndef test_check():\n    check(check_value)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_224", "name": "mbpp_224_count_Set_Bits", "language": "py", "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number. Change all int type values of the return values to float type, and add 0.21.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == 1.21\n    assert candidate(4) == 1.21\n    assert candidate(6) == 2.21\n\n\ndef test_check():\n    check(count_Set_Bits)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_607", "name": "mbpp_607_find_literals", "language": "py", "prompt": "from typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox'\n        ) == 'fox'\n    assert candidate('Its been a very crazy procedure right', 'crazy'\n        ) == 'crazy'\n    assert candidate('Hardest choices required strongest will', 'will'\n        ) == 'will'\n\n\ndef test_check():\n    check(find_literals)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_474", "name": "mbpp_474_replace_char", "language": "py", "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string. Change all str type values of the return values to float type, and return the length of the string plus 0.92.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('polygon', 'y', 'l') == 7.92\n    assert candidate('character', 'c', 'a') == 9.92\n    assert candidate('python', 'l', 'a') == 6.92\n\n\ndef test_check():\n    check(replace_char)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_465", "name": "mbpp_465_drop_empty", "language": "py", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary. Change all str type values of the return values to int type, and return the length of the string plus 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 7,\n        'c2': 9}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3': None}) == {'c1': 7}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3': None}) == {'c2': 9}\n\n\ndef test_check():\n    check(drop_empty)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_617", "name": "mbpp_617_min_Jumps", "language": "py", "prompt": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane. Change all float type values of the return values to bool type, if the answer is larger than 0.0, return True, else return False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((3, 4), 11) == True\n    assert candidate((3, 4), 0) == 0\n    assert candidate((11, 14), 11) == 1\n\n\ndef test_check():\n    check(min_Jumps)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "bool"}
{"task_id": "mbpp_418", "name": "mbpp_418_Find_Max", "language": "py", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([['A'], ['A', 'B'], ['A', 'B', 'C']]) == [[True, True,\n        True]]\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [[1, 2, 3]]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [[1, 5, 6, 1]]\n\n\ndef test_check():\n    check(Find_Max)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_562", "name": "mbpp_562_Find_Max_Length", "language": "py", "prompt": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest sublists. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1], [1, 4], [5, 6, 7, 8]]) == True\n    assert candidate([[0, 1], [2, 2], [3, 2, 1]]) == False\n    assert candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]\n        ) == False\n\n\ndef test_check():\n    check(Find_Max_Length)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_6", "name": "mbpp_6_differ_At_One_Bit_Pos", "language": "py", "prompt": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the two numbers differ at one bit position only or not. Change all bool type values of the return values to float type, and add 0.84.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(13, 9) == 1.8399999999999999\n    assert candidate(15, 8) == 0.84\n    assert candidate(2, 4) == 0.84\n    assert candidate(2, 3) == 1.8399999999999999\n    assert candidate(5, 1) == 1.8399999999999999\n    assert candidate(1, 5) == 1.8399999999999999\n\n\ndef test_check():\n    check(differ_At_One_Bit_Pos)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_425", "name": "mbpp_425_count_element_in_list", "language": "py", "prompt": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == '7'\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C',\n        'D']], 'A') == '7'\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C',\n        'D']], 'E') == '5'\n\n\ndef test_check():\n    check(count_element_in_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_245", "name": "mbpp_245_max_sum", "language": "py", "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing. Change all int type values of the return values to float type, and add 0.03.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194.03\n    assert candidate([80, 60, 30, 40, 20, 10]) == 210.03\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30]) == 138.03\n\n\ndef test_check():\n    check(max_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_295", "name": "mbpp_295_sum_div", "language": "py", "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number. Change all int type values of the return values to float type, and add 0.74.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(8) == 7.74\n    assert candidate(12) == 16.74\n    assert candidate(7) == 1.74\n\n\ndef test_check():\n    check(sum_div)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_744", "name": "mbpp_744_check_none", "language": "py", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not. Change all bool type values of the return values to str type, and change True to v, and False to w.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == 'v'\n    assert candidate((7, 8, 9, 11, 14)) == 'w'\n    assert candidate((1, 2, 3, 4, None)) == 'v'\n\n\ndef test_check():\n    check(check_none)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_80", "name": "mbpp_80_tetrahedral_number", "language": "py", "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == '39'\n    assert candidate(6) == '60'\n    assert candidate(7) == '88'\n\n\ndef test_check():\n    check(tetrahedral_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_809", "name": "mbpp_809_check_smaller", "language": "py", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple. Change all bool type values of the return values to str type, and change True to r, and False to s.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == 's'\n    assert candidate((4, 5, 6), (3, 4, 5)) == 'r'\n    assert candidate((11, 12, 13), (10, 11, 12)) == 'r'\n\n\ndef test_check():\n    check(check_smaller)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_792", "name": "mbpp_792_count_list", "language": "py", "prompt": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of lists in a given number of lists. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == False\n    assert candidate([[1, 2], [2, 3], [4, 5]]) == True\n    assert candidate([[1, 0], [2, 0]]) == False\n\n\ndef test_check():\n    check(count_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_84", "name": "mbpp_84_sequence", "language": "py", "prompt": "def sequence(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n\n\ndef test_check():\n    check(sequence)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_799", "name": "mbpp_799_left_rotate", "language": "py", "prompt": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(16, 2) == False\n    assert candidate(10, 2) == False\n    assert candidate(99, 3) == False\n    assert candidate(99, 3) == False\n    assert candidate(1, 3) == False\n    assert candidate(5, 3) == False\n    assert candidate(29, 3) == False\n\n\ndef test_check():\n    check(left_rotate)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_297", "name": "mbpp_297_flatten_list", "language": "py", "prompt": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure. Change all int type values of the return values to float type, and add 0.59.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110,\n        120]]) == [[0.59, 10.59, 20.59, 30.59, 40.59, 50.59, 60.59, 70.59, \n        80.59, 90.59, 100.59, 110.59, 120.59]]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [\n        [10.59, 20.59, 40.59, 30.59, 56.59, 25.59, 10.59, 20.59, 33.59, 40.59]]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [[\n        1.5899999999999999, 2.59, 3.59, 4.59, 5.59, 6.59, 10.59, 11.59, \n        12.59, 7.59, 8.59, 9.59]]\n\n\ndef test_check():\n    check(flatten_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_804", "name": "mbpp_804_is_product_even", "language": "py", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not. Change all bool type values of the return values to float type, and add 0.24.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 1.24\n    assert candidate([1, 2, 1, 4]) == 1.24\n    assert candidate([1, 1]) == 0.24\n\n\ndef test_check():\n    check(is_product_even)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_736", "name": "mbpp_736_left_insertion", "language": "py", "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24. Change all int type values of the return values to str type, return the string value of answer + 2.php\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == '6'\n    assert candidate([1, 2, 4, 5], 3) == '4'\n    assert candidate([1, 2, 4, 5], 7) == '6'\n\n\ndef test_check():\n    check(left_insertion)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_101", "name": "mbpp_101_kth_element", "language": "py", "prompt": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([12, 3, 5, 7, 19], 2) == True\n    assert candidate([17, 24, 8, 23], 3) == False\n    assert candidate([16, 21, 25, 36, 4], 4) == False\n\n\ndef test_check():\n    check(kth_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_12", "name": "mbpp_12_sort_matrix", "language": "py", "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows. Change all int type values of the return values to float type, and add 0.7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[[1.7, 1.7, 1.7\n        ], [1.7, 2.7, 3.7], [2.7, 4.7, 5.7]]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[[-1.3, 4.7,\n        -4.3], [1.7, -0.30000000000000004, 1.7], [1.7, 2.7, 3.7]]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[[2.7, 1.7, 4.7\n        ], [6.7, 4.7, 3.7], [5.7, 8.7, 9.7]]]\n\n\ndef test_check():\n    check(sort_matrix)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_450", "name": "mbpp_450_extract_string", "language": "py", "prompt": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 8\n        ) == [[False, False]]\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6\n        ) == [[False]]\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9\n        ) == [[True]]\n\n\ndef test_check():\n    check(extract_string)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_296", "name": "mbpp_296_get_Inv_Count", "language": "py", "prompt": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count inversions in an array. Change all int type values of the return values to float type, and add 0.32.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 20, 6, 4, 5]) == 5.32\n    assert candidate([1, 2, 1]) == 1.32\n    assert candidate([1, 2, 5, 6, 1]) == 3.32\n\n\ndef test_check():\n    check(get_Inv_Count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_406", "name": "mbpp_406_find_Parity", "language": "py", "prompt": "def find_Parity(x: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd. Change all bool type values of the return values to int type, and add 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(12) == 1\n    assert candidate(7) == 2\n    assert candidate(10) == 1\n\n\ndef test_check():\n    check(find_Parity)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_433", "name": "mbpp_433_check_greater", "language": "py", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array. Change all bool type values of the return values to float type, and add 0.97.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 0.97\n    assert candidate([2, 3, 4, 5, 6], 8) == 1.97\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 1.97\n\n\ndef test_check():\n    check(check_greater)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_398", "name": "mbpp_398_sum_of_digits", "language": "py", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 2, 56]) == '16'\n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']]) == '21'\n    assert candidate([10, 20, -4, 5, -70]) == '21'\n\n\ndef test_check():\n    check(sum_of_digits)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_250", "name": "mbpp_250_count_X", "language": "py", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == True\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == False\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == True\n\n\ndef test_check():\n    check(count_X)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_70", "name": "mbpp_70_get_equal", "language": "py", "prompt": "from typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to find whether all the given lists have equal length or not. Change all bool type values of the return values to str type, and change True to h, and False to i.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[11, 22, 33], [44, 55, 66]]) == 'h'\n    assert candidate([[1, 2, 3], [4, 5, 6, 7]]) == 'i'\n    assert candidate([[1, 2], [3, 4]]) == 'h'\n\n\ndef test_check():\n    check(get_equal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_766", "name": "mbpp_766_pair_wise", "language": "py", "prompt": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to return a list of all pairs of consecutive items in a given list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 3, 4, 4, 5]) == [[(False, False), (False,\n        True), (True, False), (False, False), (False, True), (True, True),\n        (True, False)]]\n    assert candidate([1, 5, 7, 9, 10]) == [[(False, False), (False, False),\n        (False, False), (False, True)]]\n    assert candidate([5, 1, 9, 7, 10]) == [[(False, False), (False, False),\n        (False, False), (False, True)]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[(False, True), (\n        True, False), (False, True), (True, False), (False, True), (True, \n        False), (False, True), (True, False), (False, True)]]\n\n\ndef test_check():\n    check(pair_wise)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_172", "name": "mbpp_172_count_occurance", "language": "py", "prompt": "def count_occurance(s: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('letstdlenstdporstd') == False\n    assert candidate('truststdsolensporsd') == False\n    assert candidate('makestdsostdworthit') == True\n    assert candidate('stds') == False\n    assert candidate('') == True\n\n\ndef test_check():\n    check(count_occurance)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_785", "name": "mbpp_785_tuple_str_int", "language": "py", "prompt": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function to convert tuple string to integer tuple. Change all int type values of the return values to float type, and add 0.07.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('(7, 8, 9)') == 7.07\n    assert candidate('(1, 2, 3)') == 1.07\n    assert candidate('(4, 5, 6)') == 4.07\n    assert candidate('(7, 81, 19)') == 7.07\n\n\ndef test_check():\n    check(tuple_str_int)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_282", "name": "mbpp_282_sub_list", "language": "py", "prompt": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to subtract two lists element-wise. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [[True, True, True]]\n    assert candidate([1, 2], [3, 4]) == [[False, False]]\n    assert candidate([90, 120], [50, 70]) == [[False, False]]\n\n\ndef test_check():\n    check(sub_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_791", "name": "mbpp_791_remove_nested", "language": "py", "prompt": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == False\n    assert candidate((2, 6, 8, (5, 7), 11)) == True\n    assert candidate((3, 7, 9, (6, 8), 12)) == False\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12)) == False\n\n\ndef test_check():\n    check(remove_nested)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_61", "name": "mbpp_61_count_Substrings", "language": "py", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('112112') == True\n    assert candidate('111') == True\n    assert candidate('1101112') == True\n\n\ndef test_check():\n    check(count_Substrings)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_278", "name": "mbpp_278_count_first_elements", "language": "py", "prompt": "from typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the list element in the given tuple. Change all int type values of the return values to float type, and add 0.18.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 5, 7, (4, 6), 10]) == 3.18\n    assert candidate([2, 9, (5, 7), 11]) == 2.18\n    assert candidate([11, 15, 5, 8, (2, 3), 8]) == 4.18\n\n\ndef test_check():\n    check(count_first_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_612", "name": "mbpp_612_merge", "language": "py", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second. Change all int type values of the return values to float type, and add 0.78.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [[['x', 'a',\n        'm'], ['y', 'b', 'n']]]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[[1.78, \n        3.7800000000000002, 5.78, 7.78], [2.7800000000000002, 4.78, 6.78, \n        8.78]]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']]) == [[\n        ['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]]\n\n\ndef test_check():\n    check(merge)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_239", "name": "mbpp_239_get_total_number_of_sequences", "language": "py", "prompt": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 4) == True\n    assert candidate(5, 2) == True\n    assert candidate(16, 3) == True\n\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_69", "name": "mbpp_69_is_sublist", "language": "py", "prompt": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not. Change all bool type values of the return values to str type, and change True to c, and False to d.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 4, 3, 5, 7], [3, 7]) == 'd'\n    assert candidate([2, 4, 3, 5, 7], [4, 3]) == 'c'\n    assert candidate([2, 4, 3, 5, 7], [1, 6]) == 'd'\n\n\ndef test_check():\n    check(is_sublist)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_397", "name": "mbpp_397_median_numbers", "language": "py", "prompt": "def median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of three numbers. Change all float type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(25, 55, 65) == '63.0'\n    assert candidate(20, 10, 30) == '28.0'\n    assert candidate(15, 45, 75) == '53.0'\n\n\ndef test_check():\n    check(median_numbers)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_131", "name": "mbpp_131_reverse_vowels", "language": "py", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel). Change all str type values of the return values to int type, and return the length of the string plus 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Python') == 15\n    assert candidate('USA') == 12\n    assert candidate('ab') == 11\n\n\ndef test_check():\n    check(reverse_vowels)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_760", "name": "mbpp_760_unique_Element", "language": "py", "prompt": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not. Change all bool type values of the return values to float type, and add 0.27.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 1]) == 1.27\n    assert candidate([1, 2, 1, 2]) == 0.27\n    assert candidate([1, 2, 3, 4, 5]) == 0.27\n\n\ndef test_check():\n    check(unique_Element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_390", "name": "mbpp_390_add_string", "language": "py", "prompt": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4], 'temp{0}') == [[False, False, False, False]]\n    assert candidate(['a', 'b', 'c', 'd'], 'python{0}') == [[False, False, \n        False, False]]\n    assert candidate([5, 6, 7, 8], 'string{0}') == [[False, False, False, \n        False]]\n\n\ndef test_check():\n    check(add_string)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_267", "name": "mbpp_267_square_Sum", "language": "py", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers. Change all int type values of the return values to float type, and add 0.92.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == 10.92\n    assert candidate(3) == 35.92\n    assert candidate(4) == 84.92\n\n\ndef test_check():\n    check(square_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_408", "name": "mbpp_408_k_smallest_pairs", "language": "py", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[[False, True], [False, \n        True]]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[[False, True]]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[[False, True], [False, \n        True], [False, True], [False, True], [False, True], [False, True],\n        [False, True]]]\n\n\ndef test_check():\n    check(k_smallest_pairs)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_769", "name": "mbpp_769_Diff", "language": "py", "prompt": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the difference between two lists. Change all int type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [['15',\n        '25', '35', '20']]\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 1]) == [['7', '8', '9', '10',\n        '11', '12']]\n    assert candidate([1, 2, 3], [6, 7, 1]) == [['7', '8', '11', '12']]\n\n\ndef test_check():\n    check(Diff)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_628", "name": "mbpp_628_replace_spaces", "language": "py", "prompt": "def replace_spaces(string: str) -> str:\n    \"\"\"\n\tWrite a function to replace all spaces in the given string with '%20'. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('My Name is Dawood') == True\n    assert candidate('I am a Programmer') == True\n    assert candidate('I love Coding') == True\n\n\ndef test_check():\n    check(replace_spaces)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_18", "name": "mbpp_18_remove_dirty_chars", "language": "py", "prompt": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string. Change all str type values of the return values to float type, and return the length of the string plus 0.83.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('probasscurve', 'pros') == 6.83\n    assert candidate('digitalindia', 'talent') == 7.83\n    assert candidate('exoticmiles', 'toxic') == 5.83\n\n\ndef test_check():\n    check(remove_dirty_chars)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_781", "name": "mbpp_781_count_divisors", "language": "py", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24. Change all bool type values of the return values to int type, and add 2.php\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == 3\n    assert candidate(100) == 2\n    assert candidate(125) == 3\n\n\ndef test_check():\n    check(count_divisors)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_8", "name": "mbpp_8_square_nums", "language": "py", "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[False, True, \n        False, True, False, True, False, True, False, True]]\n    assert candidate([10, 20, 30]) == [[True, True, True]]\n    assert candidate([12, 15]) == [[True, False]]\n\n\ndef test_check():\n    check(square_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_102", "name": "mbpp_102_snake_to_camel", "language": "py", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string. Change all str type values of the return values to int type, and return the length of the string plus 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python_program') == 15\n    assert candidate('python_language') == 16\n    assert candidate('programming_language') == 21\n\n\ndef test_check():\n    check(snake_to_camel)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_750", "name": "mbpp_750_add_tuple", "language": "py", "prompt": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n\tWrite a function to add the given tuple to the given list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [[False, True, False, False, True]]\n    assert candidate([6, 7, 8], (10, 11)) == [[True, False, True, True, False]]\n    assert candidate([7, 8, 9], (11, 12)) == [[False, True, False, False, True]\n        ]\n\n\ndef test_check():\n    check(add_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_166", "name": "mbpp_166_find_even_pair", "language": "py", "prompt": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number. Change all int type values of the return values to float type, and add 0.48.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1]) == 4.48\n    assert candidate([7, 2, 8, 1, 0, 5, 11]) == 9.48\n    assert candidate([1, 2, 3]) == 1.48\n\n\ndef test_check():\n    check(find_even_pair)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_105", "name": "mbpp_105_count", "language": "py", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list. Change all int type values of the return values to float type, and add 0.26.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([True, False, True]) == 2.26\n    assert candidate([False, False]) == 0.26\n    assert candidate([True, True, True]) == 3.26\n\n\ndef test_check():\n    check(count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_728", "name": "mbpp_728_sum_list", "language": "py", "prompt": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 20, 30], [15, 25, 35]) == [['31', '51', '71']]\n    assert candidate([1, 2, 3], [5, 6, 7]) == [['12', '14', '16']]\n    assert candidate([15, 20, 30], [15, 45, 75]) == [['36', '71', '111']]\n\n\ndef test_check():\n    check(sum_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_554", "name": "mbpp_554_Split", "language": "py", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones. Change all int type values of the return values to float type, and add 0.92.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == [[1.92, 3.92, 5.92]]\n    assert candidate([10, 11, 12, 13]) == [[11.92, 13.92]]\n    assert candidate([7, 8, 9, 1]) == [[7.92, 9.92, 1.92]]\n\n\ndef test_check():\n    check(Split)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_109", "name": "mbpp_109_odd_Equivalent", "language": "py", "prompt": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('011001', 6) == True\n    assert candidate('11011', 5) == False\n    assert candidate('1010', 4) == False\n\n\ndef test_check():\n    check(odd_Equivalent)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_808", "name": "mbpp_808_check_K", "language": "py", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not. Change all bool type values of the return values to str type, and change True to a, and False to b.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 4, 5, 6, 8], 6) == 'a'\n    assert candidate([1, 2, 3, 4, 5, 6], 7) == 'b'\n    assert candidate([7, 8, 9, 44, 11, 12], 11) == 'a'\n\n\ndef test_check():\n    check(check_K)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_58", "name": "mbpp_58_opposite_Signs", "language": "py", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not. Change all bool type values of the return values to str type, and change True to a, and False to b.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, -2) == 'a'\n    assert candidate(3, 2) == 'b'\n    assert candidate(-10, -10) == 'b'\n    assert candidate(-2, 2) == 'a'\n\n\ndef test_check():\n    check(opposite_Signs)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_807", "name": "mbpp_807_first_odd", "language": "py", "prompt": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the first odd number in a given list of numbers. Change all int type values of the return values to float type, and add 0.08.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 5]) == 1.08\n    assert candidate([2, 4, 1, 3]) == 1.08\n    assert candidate([8, 9, 1]) == 9.08\n\n\ndef test_check():\n    check(first_odd)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_414", "name": "mbpp_414_overlapping", "language": "py", "prompt": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not. Change all bool type values of the return values to int type, and add 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == 8\n    assert candidate([1, 2, 3], [4, 5, 6]) == 8\n    assert candidate([1, 4, 5], [1, 4, 5]) == 9\n\n\ndef test_check():\n    check(overlapping)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_251", "name": "mbpp_251_insert_element", "language": "py", "prompt": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Black'], 'c') == [[True, True, True,\n        True, True, True]]\n    assert candidate(['python', 'java'], 'program') == [[True, False, True,\n        False]]\n    assert candidate(['happy', 'sad'], 'laugh') == [[True, True, True, True]]\n\n\ndef test_check():\n    check(insert_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_592", "name": "mbpp_592_sum_Of_product", "language": "py", "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the product of consecutive binomial co-efficients. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == True\n    assert candidate(4) == False\n    assert candidate(1) == True\n\n\ndef test_check():\n    check(sum_Of_product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_603", "name": "mbpp_603_get_ludic", "language": "py", "prompt": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == [['5', '6', '7', '9', '11']]\n    assert candidate(25) == [['5', '6', '7', '9', '11', '15', '17', '21',\n        '27', '29']]\n    assert candidate(45) == [['5', '6', '7', '9', '11', '15', '17', '21',\n        '27', '29', '33', '41', '45', '47']]\n\n\ndef test_check():\n    check(get_ludic)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_599", "name": "mbpp_599_sum_average", "language": "py", "prompt": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n\tWrite a function to find sum and average of first n natural numbers. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == '59'\n    assert candidate(15) == '124'\n    assert candidate(20) == '214'\n\n\ndef test_check():\n    check(sum_average)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_277", "name": "mbpp_277_dict_filter", "language": "py", "prompt": "from typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n. Change all int type values of the return values to float type, and add 0.74.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180,\n        'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': \n        175.74, 'Alden Cantrell': 180.74, 'Pierre Cox': 190.74}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180,\n        'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell':\n        180.74, 'Pierre Cox': 190.74}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180,\n        'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190.74\n        }\n\n\ndef test_check():\n    check(dict_filter)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_639", "name": "mbpp_639_sample_nam", "language": "py", "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Change all int type values of the return values to float type, and add 0.57.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\n        ) == 16.57\n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa']) == 10.57\n    assert candidate(['abcd', 'Python', 'abba', 'aba']) == 6.57\n\n\ndef test_check():\n    check(sample_nam)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_574", "name": "mbpp_574_surfacearea_cylinder", "language": "py", "prompt": "def surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the surface area of a cylinder. Change all float type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 5) == '947.45'\n    assert candidate(4, 5) == '231.18800000000002'\n    assert candidate(4, 10) == '356.848'\n\n\ndef test_check():\n    check(surfacearea_cylinder)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_272", "name": "mbpp_272_rear_extract", "language": "py", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [\n        [True, False, True]]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]\n        ) == [[False, True, True]]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]\n        ) == [[False, False, False]]\n\n\ndef test_check():\n    check(rear_extract)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_802", "name": "mbpp_802_count_rotation", "language": "py", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks. Change all int type values of the return values to float type, and add 0.72.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 2, 1]) == 1.72\n    assert candidate([4, 5, 1, 2, 3]) == 2.7199999999999998\n    assert candidate([7, 8, 9, 1, 2, 3]) == 3.7199999999999998\n    assert candidate([1, 2, 3]) == 0.72\n    assert candidate([1, 3, 2]) == 2.7199999999999998\n\n\ndef test_check():\n    check(count_rotation)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_292", "name": "mbpp_292_find", "language": "py", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer). Change all int type values of the return values to float type, and add 0.7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 3) == 3.7\n    assert candidate(4, 2) == 2.7\n    assert candidate(20, 5) == 4.7\n\n\ndef test_check():\n    check(find)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_579", "name": "mbpp_579_find_dissimilar", "language": "py", "prompt": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the dissimilar elements in the given two tuples. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == '4'\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == '2'\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == '35'\n\n\ndef test_check():\n    check(find_dissimilar)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_430", "name": "mbpp_430_parabola_directrix", "language": "py", "prompt": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find the directrix of a parabola. Change all int type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5, 3, 2) == '-193'\n    assert candidate(9, 8, 4) == '-2331'\n    assert candidate(2, 4, 6) == '-125'\n\n\ndef test_check():\n    check(parabola_directrix)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_93", "name": "mbpp_93_power", "language": "py", "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3, 4) == True\n    assert candidate(2, 3) == False\n    assert candidate(5, 5) == True\n\n\ndef test_check():\n    check(power)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_593", "name": "mbpp_593_removezero_ip", "language": "py", "prompt": "def removezero_ip(ip: str) -> str:\n    \"\"\"\n\tWrite a function to remove leading zeroes from an ip address. Change all str type values of the return values to int type, and return the length of the string plus 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('216.08.094.196') == 17\n    assert candidate('12.01.024') == 12\n    assert candidate('216.08.094.0196') == 17\n\n\ndef test_check():\n    check(removezero_ip)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_749", "name": "mbpp_749_sort_numeric_strings", "language": "py", "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']\n        ) == [[True, True, True, True, False, True, False, True, True]]\n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1',\n        '6', '1', '2', '3', '4', '6', '9', '1', '2']) == [[False, False, \n        False, True, True, True, True, False, False, True, True, False, \n        True, True, True, False, True, True, False, False]]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5',\n        '7 ', '9', '1', '11']) == [[False, False, False, False, False, \n        False, False, False, False, False, False, False, False, False]]\n\n\ndef test_check():\n    check(sort_numeric_strings)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_116", "name": "mbpp_116_tuple_to_int", "language": "py", "prompt": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((1, 2, 3)) == '130'\n    assert candidate((4, 5, 6)) == '463'\n    assert candidate((5, 6, 7)) == '574'\n\n\ndef test_check():\n    check(tuple_to_int)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_126", "name": "mbpp_126_sum", "language": "py", "prompt": "def sum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers. Change all int type values of the return values to float type, and add 0.5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 15) == 6.5\n    assert candidate(100, 150) == 93.5\n    assert candidate(4, 6) == 3.5\n\n\ndef test_check():\n    check(sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_426", "name": "mbpp_426_filter_oddnumbers", "language": "py", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers. Change all int type values of the return values to float type, and add 0.36.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[\n        1.3599999999999999, 3.36, 5.36, 7.36, 9.36]]\n    assert candidate([10, 20, 45, 67, 84, 93]) == [[45.36, 67.36, 93.36]]\n    assert candidate([5, 7, 9, 8, 6, 4, 3]) == [[5.36, 7.36, 9.36, 3.36]]\n\n\ndef test_check():\n    check(filter_oddnumbers)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_740", "name": "mbpp_740_tuple_to_dict", "language": "py", "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks. Change all int type values of the return values to float type, and add 0.83.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {(1): 5.83, (7): 10.83, (13):\n        5.83}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {(1): 2.83, (3): 4.83, (5): 6.83}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {(7): 8.83, (9): 10.83, (11):\n        12.83}\n\n\ndef test_check():\n    check(tuple_to_dict)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_604", "name": "mbpp_604_reverse_words", "language": "py", "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n\tWrite a function to reverse words seperated by spaces in a given string. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python program') == False\n    assert candidate('java language') == True\n    assert candidate('indian man') == False\n\n\ndef test_check():\n    check(reverse_words)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_588", "name": "mbpp_588_big_diff", "language": "py", "prompt": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between largest and smallest value in a given list. Change all int type values of the return values to float type, and add 0.62.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == 3.62\n    assert candidate([4, 5, 12]) == 8.62\n    assert candidate([9, 2, 3]) == 7.62\n\n\ndef test_check():\n    check(big_diff)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_618", "name": "mbpp_618_div_list", "language": "py", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise. Change all float type values of the return values to int type, keep the integer part of the result plus 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [[10, 8, 8]]\n    assert candidate([3, 2], [1, 4]) == [[9, 6]]\n    assert candidate([90, 120], [50, 70]) == [[7, 7]]\n\n\ndef test_check():\n    check(div_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "int"}
{"task_id": "mbpp_283", "name": "mbpp_283_validate", "language": "py", "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself. Change all bool type values of the return values to int type, and add 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1234) == 1\n    assert candidate(51241) == 0\n    assert candidate(321) == 1\n\n\ndef test_check():\n    check(validate)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_431", "name": "mbpp_431_common_element", "language": "py", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element. Change all bool type values of the return values to int type, and add 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == 1\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e']) == 1\n\n\ndef test_check():\n    check(common_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_253", "name": "mbpp_253_count_integer", "language": "py", "prompt": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list. Change all int type values of the return values to float type, and add 0.76.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 'abc', 1.2]) == 2.76\n    assert candidate([1, 2, 3]) == 3.76\n    assert candidate([1, 1.2, 4, 5.1]) == 2.76\n\n\ndef test_check():\n    check(count_integer)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_454", "name": "mbpp_454_text_match_wordz", "language": "py", "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'. Change all bool type values of the return values to float type, and add 0.44.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('pythonz.') == 1.44\n    assert candidate('xyz.') == 1.44\n    assert candidate('  lang  .') == 0.44\n\n\ndef test_check():\n    check(text_match_wordz)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_83", "name": "mbpp_83_get_Char", "language": "py", "prompt": "def get_Char(strr: str) -> str:\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abc') == False\n    assert candidate('gfg') == False\n    assert candidate('ab') == False\n\n\ndef test_check():\n    check(get_Char)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_600", "name": "mbpp_600_is_Even", "language": "py", "prompt": "def is_Even(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number is even or not. Change all bool type values of the return values to float type, and add 0.29.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1) == 0.29\n    assert candidate(2) == 1.29\n    assert candidate(3) == 0.29\n\n\ndef test_check():\n    check(is_Even)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_594", "name": "mbpp_594_diff_even_odd", "language": "py", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    assert candidate([1, 5, 7, 9, 10]) == True\n\n\ndef test_check():\n    check(diff_even_odd)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_405", "name": "mbpp_405_check_tuplex", "language": "py", "prompt": "from typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple. Change all bool type values of the return values to str type, and change True to d, and False to e.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 'r'\n        ) == 'd'\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5'\n        ) == 'e'\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 3\n        ) == 'd'\n\n\ndef test_check():\n    check(check_tuplex)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_786", "name": "mbpp_786_right_insertion", "language": "py", "prompt": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the right insertion point for a specified value in sorted order. Change all int type values of the return values to float type, and add 0.2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 5], 6) == 4.2\n    assert candidate([1, 2, 4, 5], 3) == 2.2\n    assert candidate([1, 2, 4, 5], 7) == 4.2\n\n\ndef test_check():\n    check(right_insertion)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_564", "name": "mbpp_564_count_Pairs", "language": "py", "prompt": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 1], 3) == '8'\n    assert candidate([1, 1, 1, 1], 4) == '6'\n    assert candidate([1, 2, 3, 4, 5], 5) == '16'\n\n\ndef test_check():\n    check(count_Pairs)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_773", "name": "mbpp_773_occurance_substring", "language": "py", "prompt": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python programming, python language', 'python'\n        ) == 'python'\n    assert candidate('python programming,programming language', 'programming'\n        ) == 'programming'\n    assert candidate('python programming,programming language', 'language'\n        ) == 'language'\n    assert candidate('c++ programming, c++ language', 'python') == None\n\n\ndef test_check():\n    check(occurance_substring)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_415", "name": "mbpp_415_max_Product", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers. Change all int type values of the return values to float type, and add 0.87.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == 7.87\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == -3.13\n    assert candidate([1, 2, 3]) == 2.87\n\n\ndef test_check():\n    check(max_Product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_796", "name": "mbpp_796_return_sum", "language": "py", "prompt": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n\tWrite function to find the sum of all items in the given dictionary. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'a': 100, 'b': 200, 'c': 300}) == True\n    assert candidate({'a': 25, 'b': 18, 'c': 45}) == True\n    assert candidate({'a': 36, 'b': 39, 'c': 49}) == True\n\n\ndef test_check():\n    check(return_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_86", "name": "mbpp_86_centered_hexagonal_number", "language": "py", "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == '273'\n    assert candidate(2) == '9'\n    assert candidate(9) == '219'\n\n\ndef test_check():\n    check(centered_hexagonal_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_293", "name": "mbpp_293_otherside_rightangle", "language": "py", "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle. Change all int type values of the return values to float type, and add 0.21.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(7, 8) == 10.63014581273465\n    assert candidate(3, 4) == 5.21\n    assert candidate(7, 15) == 16.55294535724685\n\n\ndef test_check():\n    check(otherside_rightangle)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_640", "name": "mbpp_640_remove_parenthesis", "language": "py", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['python (chrome)']) == False\n    assert candidate(['string(.abc)']) == False\n    assert candidate(['alpha(num)']) == True\n\n\ndef test_check():\n    check(remove_parenthesis)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_753", "name": "mbpp_753_min_k", "language": "py", "prompt": "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), (\n        'Nikhil', 8)], 2) == [[('Akash', False), ('Akshat', False)]]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin',\n        9)], 3) == [[('Akash', True), ('Angat', True), ('Nepin', True)]]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', \n        16)], 1) == [[('Ayesha', True)]]\n\n\ndef test_check():\n    check(min_k)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_56", "name": "mbpp_56_checks", "language": "py", "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse. Change all bool type values of the return values to str type, and change True to h, and False to i.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(70) == 'i'\n    assert candidate(23) == 'i'\n    assert candidate(73) == 'h'\n\n\ndef test_check():\n    check(checks)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_637", "name": "mbpp_637_noprofit_noloss", "language": "py", "prompt": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n Change all bool type values of the return values to float type, and add 0.77.    \"\"\"\n\tWrite a function to check whether the given amount has no profit and no loss\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1500, 1200) == 0.77\n    assert candidate(100, 100) == 1.77\n    assert candidate(2000, 5000) == 0.77\n\n\ndef test_check():\n    check(noprofit_noloss)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_62", "name": "mbpp_62_smallest_num", "language": "py", "prompt": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find smallest number in a list. Change all int type values of the return values to float type, and add 0.52.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1.52\n    assert candidate([1, 2, 3]) == 1.52\n    assert candidate([45, 46, 50, 60]) == 45.52\n\n\ndef test_check():\n    check(smallest_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_100", "name": "mbpp_100_next_smallest_palindrome", "language": "py", "prompt": "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(99) == '111'\n    assert candidate(1221) == '1341'\n    assert candidate(120) == '131'\n\n\ndef test_check():\n    check(next_smallest_palindrome)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_555", "name": "mbpp_555_difference", "language": "py", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == True\n    assert candidate(5) == True\n    assert candidate(2) == True\n\n\ndef test_check():\n    check(difference)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_96", "name": "mbpp_96_divisor", "language": "py", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer. Change all int type values of the return values to float type, and add 0.25.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(15) == 4.25\n    assert candidate(12) == 6.25\n    assert candidate(9) == 3.25\n\n\ndef test_check():\n    check(divisor)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_411", "name": "mbpp_411_snake_to_camel", "language": "py", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string. Change all str type values of the return values to int type, and return the length of the string plus 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('android_tv') == 16\n    assert candidate('google_pixel') == 18\n    assert candidate('apple_watch') == 17\n\n\ndef test_check():\n    check(snake_to_camel)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_57", "name": "mbpp_57_find_Max_Num", "language": "py", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == '323'\n    assert candidate([4, 5, 6, 1]) == '6543'\n    assert candidate([1, 2, 3, 9]) == '9323'\n\n\ndef test_check():\n    check(find_Max_Num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_266", "name": "mbpp_266_lateralsurface_cube", "language": "py", "prompt": "def lateralsurface_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(9) == True\n    assert candidate(10) == True\n\n\ndef test_check():\n    check(lateralsurface_cube)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_724", "name": "mbpp_724_power_base_sum", "language": "py", "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2, 100) == False\n    assert candidate(8, 10) == False\n    assert candidate(8, 15) == True\n    assert candidate(3, 3) == False\n\n\ndef test_check():\n    check(power_base_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_559", "name": "mbpp_559_max_sub_array_sum", "language": "py", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == '17'\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == '18'\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == '20'\n\n\ndef test_check():\n    check(max_sub_array_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_738", "name": "mbpp_738_geometric_sum", "language": "py", "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\"\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9. Change all float type values of the return values to int type, keep the integer part of the result plus 5.php\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(7) == 6\n    assert candidate(4) == 6\n    assert candidate(8) == 6\n\n\ndef test_check():\n    check(geometric_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "int"}
{"task_id": "mbpp_17", "name": "mbpp_17_square_perimeter", "language": "py", "prompt": "def square_perimeter(a: int) -> int:\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == '41'\n    assert candidate(5) == '21'\n    assert candidate(4) == '17'\n\n\ndef test_check():\n    check(square_perimeter)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_284", "name": "mbpp_284_check_element", "language": "py", "prompt": "from typing import List, Any\n\ndef check_element(list: List[Any], element: Any) -> bool:\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element. Change all bool type values of the return values to float type, and add 0.33.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['green', 'orange', 'black', 'white'], 'blue') == 0.33\n    assert candidate([1, 2, 3, 4], 7) == 0.33\n    assert candidate(['green', 'green', 'green', 'green'], 'green') == 1.33\n\n\ndef test_check():\n    check(check_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_74", "name": "mbpp_74_is_samepatterns", "language": "py", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array. Change all bool type values of the return values to int type, and add 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == 2\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == 1\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == 1\n\n\ndef test_check():\n    check(is_samepatterns)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_435", "name": "mbpp_435_last_Digit", "language": "py", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(123) == False\n    assert candidate(25) == False\n    assert candidate(30) == True\n\n\ndef test_check():\n    check(last_Digit)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_299", "name": "mbpp_299_max_aggregate", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples. Change all int type values of the return values to float type, and add 0.21.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('Juan Whelan', 90), ('Sabah Colley', 88), (\n        'Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]\n        ) == 'Juan Whelan'\n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), (\n        'Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)]\n        ) == 'Juan Whelan'\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), (\n        'Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)]\n        ) == 'Sabah Colley'\n\n\ndef test_check():\n    check(max_aggregate)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_589", "name": "mbpp_589_perfect_squares", "language": "py", "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, 30) == [[False, True, False, True, False]]\n    assert candidate(50, 100) == [[True, False, True]]\n    assert candidate(100, 200) == [[True, False, True, False, True]]\n\n\ndef test_check():\n    check(perfect_squares)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_3", "name": "mbpp_3_is_not_prime", "language": "py", "prompt": "def is_not_prime(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to identify non-prime numbers. Change all bool type values of the return values to str type, and change True to x, and False to y.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == 'y'\n    assert candidate(10) == 'x'\n    assert candidate(35) == 'x'\n    assert candidate(37) == 'y'\n\n\ndef test_check():\n    check(is_not_prime)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_556", "name": "mbpp_556_find_Odd_Pair", "language": "py", "prompt": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose xor value is odd. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 4, 7, 2, 1], 5) == False\n    assert candidate([7, 2, 8, 1, 0, 5, 11], 7) == False\n    assert candidate([1, 2, 3], 3) == False\n\n\ndef test_check():\n    check(find_Odd_Pair)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_143", "name": "mbpp_143_find_lists", "language": "py", "prompt": "from typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to find number of lists present in the given list. Change all int type values of the return values to float type, and add 0.86.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8]]) == 2.86\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == 3.86\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1.8599999999999999\n\n\ndef test_check():\n    check(find_lists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_67", "name": "mbpp_67_bell_number", "language": "py", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers. Change all int type values of the return values to float type, and add 0.95.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == 2.95\n    assert candidate(10) == 115975.95\n    assert candidate(56) == 6.775685320645824e+54\n\n\ndef test_check():\n    check(bell_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_168", "name": "mbpp_168_frequency", "language": "py", "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3], 4) == '2'\n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3) == '5'\n    assert candidate([0, 1, 2, 3, 1, 2], 1) == '4'\n\n\ndef test_check():\n    check(frequency)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_629", "name": "mbpp_629_Split", "language": "py", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to find even numbers from a list of numbers. Change all int type values of the return values to float type, and add 0.76.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == [[2.76, 4.76]]\n    assert candidate([4, 5, 6, 7, 8, 0, 1]) == [[4.76, 6.76, 8.76, 0.76]]\n    assert candidate([8, 12, 15, 19]) == [[8.76, 12.76]]\n\n\ndef test_check():\n    check(Split)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_410", "name": "mbpp_410_min_val", "language": "py", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == False\n    assert candidate(['Python', 15, 20, 25]) == True\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == False\n\n\ndef test_check():\n    check(min_val)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_142", "name": "mbpp_142_count_samepair", "language": "py", "prompt": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2,\n        1, 3, 1, 2, 6, 7, 9]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2,\n        1, 3, 1, 2, 6, 7, 8]) == False\n    assert candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2,\n        1, 3, 1, 2, 6, 7, 8]) == True\n\n\ndef test_check():\n    check(count_samepair)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_793", "name": "mbpp_793_last", "language": "py", "prompt": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last position of an element in a sorted array. Change all int type values of the return values to float type, and add 0.3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3], 1) == 0.3\n    assert candidate([1, 1, 1, 2, 3, 4], 1) == 2.3\n    assert candidate([2, 3, 2, 3, 6, 8, 9], 3) == 3.3\n\n\ndef test_check():\n    check(last)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_257", "name": "mbpp_257_swap_numbers", "language": "py", "prompt": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a list with the second number and then the first number. Change all int type values of the return values to float type, and add 0.72.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 20) == [[20.72, 10.72]]\n    assert candidate(15, 17) == [[17.72, 15.72]]\n    assert candidate(100, 200) == [[200.72, 100.72]]\n\n\ndef test_check():\n    check(swap_numbers)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_605", "name": "mbpp_605_prime_num", "language": "py", "prompt": "def prime_num(num: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given integer is a prime number. Change all bool type values of the return values to str type, and change True to a, and False to b.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(13) == 'a'\n    assert candidate(7) == 'a'\n    assert candidate(-1010) == 'b'\n\n\ndef test_check():\n    check(prime_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_91", "name": "mbpp_91_find_substring", "language": "py", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values. Change all bool type values of the return values to int type, and add 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == 1\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == 0\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == 1\n\n\ndef test_check():\n    check(find_substring)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_747", "name": "mbpp_747_lcs_of_three", "language": "py", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks. Change all int type values of the return values to float type, and add 0.51.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2.51\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5.51\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3.51\n\n\ndef test_check():\n    check(lcs_of_three)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_806", "name": "mbpp_806_max_run_uppercase", "language": "py", "prompt": "def max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == True\n    assert candidate('PrECIOusMOVemENTSYT') == False\n    assert candidate('GooGLEFluTTER') == False\n\n\ndef test_check():\n    check(max_run_uppercase)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_262", "name": "mbpp_262_split_two_parts", "language": "py", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple. Change all int type values of the return values to float type, and add 0.72.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1.72, 1.72, \n        2.7199999999999998]\n    assert candidate(['a', 'b', 'c', 'd'], 2) == ['a', 'b']\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == ['p', 'y', 't', 'h']\n\n\ndef test_check():\n    check(split_two_parts)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_167", "name": "mbpp_167_next_power_of_2", "language": "py", "prompt": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(0) == True\n    assert candidate(5) == False\n    assert candidate(17) == False\n\n\ndef test_check():\n    check(next_power_of_2)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_787", "name": "mbpp_787_text_match_three", "language": "py", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'. Change all bool type values of the return values to str type, and change True to h, and False to i.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('ac') == 'i'\n    assert candidate('dc') == 'i'\n    assert candidate('abbbba') == 'h'\n    assert candidate('caacabbbba') == 'h'\n\n\ndef test_check():\n    check(text_match_three)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_619", "name": "mbpp_619_move_num", "language": "py", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == True\n    assert candidate('Avengers124Assemble') == True\n    assert candidate('Its11our12path13to14see15things16do17things') == True\n\n\ndef test_check():\n    check(move_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_461", "name": "mbpp_461_upper_ctr", "language": "py", "prompt": "def upper_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('PYthon') == True\n    assert candidate('BigData') == True\n    assert candidate('program') == False\n\n\ndef test_check():\n    check(upper_ctr)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_75", "name": "mbpp_75_find_tuples", "language": "py", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [[(False,\n        False, False)]]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [[(True, \n        True, False)]]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [[(False,\n        False, False)]]\n\n\ndef test_check():\n    check(find_tuples)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_463", "name": "mbpp_463_max_subarray_product", "language": "py", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array. Change all int type values of the return values to float type, and add 0.78.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112.78\n    assert candidate([6, -3, -10, 0, 2]) == 180.78\n    assert candidate([-2, -40, 0, -2, -3]) == 80.78\n\n\ndef test_check():\n    check(max_subarray_product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_97", "name": "mbpp_97_frequency_lists", "language": "py", "prompt": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {(1): \n        True, (2): True, (3): True, (4): True, (5): False, (6): True, (7): \n        True, (8): True, (9): True}\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == {(1):\n        True, (2): True, (3): True, (4): True, (5): True, (6): True, (7): \n        True, (8): True, (9): True, (10): True, (11): True, (12): True}\n    assert candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]\n        ) == {(20): False, (30): False, (40): False, (17): True, (18): True,\n        (16): True, (14): True, (13): True, (10): True}\n\n\ndef test_check():\n    check(frequency_lists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_90", "name": "mbpp_90_len_log", "language": "py", "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word. Change all int type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['python', 'PHP', 'bigdata']) == '12'\n    assert candidate(['a', 'ab', 'abc']) == '8'\n    assert candidate(['small', 'big', 'tall']) == '10'\n\n\ndef test_check():\n    check(len_log)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_249", "name": "mbpp_249_intersection_array", "language": "py", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [[False,\n        True, True, False]]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [[False, \n        False, False, False]]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [[True]]\n\n\ndef test_check():\n    check(intersection_array)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_800", "name": "mbpp_800_remove_all_spaces", "language": "py", "prompt": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from a string. Change all str type values of the return values to int type, and return the length of the string plus 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python  program') == 22\n    assert candidate('python   programming    language') == 34\n    assert candidate('python                     program') == 22\n    assert candidate('   python                     program') == 22\n\n\ndef test_check():\n    check(remove_all_spaces)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_563", "name": "mbpp_563_extract_values", "language": "py", "prompt": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks from a string. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"') == [[True, False, True]]\n    assert candidate('\"python\",\"program\",\"language\"') == [[True, False, True]]\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"') == [[False, True, \n        False, True]]\n\n\ndef test_check():\n    check(extract_values)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_269", "name": "mbpp_269_ascii_value", "language": "py", "prompt": "def ascii_value(k: str) -> int:\n    \"\"\"\n\tWrite a function to find the ascii value of a character. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('A') == '68'\n    assert candidate('R') == '85'\n    assert candidate('S') == '86'\n\n\ndef test_check():\n    check(ascii_value)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_130", "name": "mbpp_130_max_occurrences", "language": "py", "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6,\n        9, 1, 2]) == True\n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]\n        ) == True\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == True\n\n\ndef test_check():\n    check(max_occurrences)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_133", "name": "mbpp_133_sum_negativenum", "language": "py", "prompt": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == '-26'\n    assert candidate([10, 15, -14, 13, -18, 12, -20]) == '-46'\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == '-888'\n\n\ndef test_check():\n    check(sum_negativenum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_798", "name": "mbpp_798__sum", "language": "py", "prompt": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of an array. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == False\n    assert candidate([15, 12, 13, 10]) == False\n    assert candidate([0, 1, 2]) == True\n\n\ndef test_check():\n    check(_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_627", "name": "mbpp_627_find_First_Missing", "language": "py", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers. Change all int type values of the return values to float type, and add 0.91.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([0, 1, 2, 3]) == 4.91\n    assert candidate([0, 1, 2, 6, 9]) == 3.91\n    assert candidate([2, 3, 5, 8, 9]) == 0.91\n\n\ndef test_check():\n    check(find_First_Missing)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_733", "name": "mbpp_733_find_first_occurrence", "language": "py", "prompt": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == True\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == False\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == False\n\n\ndef test_check():\n    check(find_first_occurrence)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_805", "name": "mbpp_805_max_sum_list", "language": "py", "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest. Change all int type values of the return values to float type, and add 0.67.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [[\n        10.67, 11.67, 12.67]]\n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [[12.67, \n        11.67, 10.67]]\n    assert candidate([[2, 3, 1]]) == [[2.67, 3.67, 1.67]]\n\n\ndef test_check():\n    check(max_sum_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_108", "name": "mbpp_108_merge_sorted_list", "language": "py", "prompt": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233,\n        154], [24, 26, 54, 48]) == [[True, False, False, False, False, True,\n        True, True, False, False, True, False, True, True, True, True, True,\n        False]]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [[\n        False, False, True, False, True, False, False, True, False, False, \n        True, True, False, False, True]]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85,\n        14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]) == [[False, True, \n        False, True, False, True, False, False, False, True, True, True, \n        True, True, True, False, False, False, False, True, True, False, \n        False, True, False, False]]\n\n\ndef test_check():\n    check(merge_sorted_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_437", "name": "mbpp_437_remove_odd", "language": "py", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string. Change all str type values of the return values to float type, and return the length of the string plus 0.8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python') == 3.8\n    assert candidate('program') == 3.8\n    assert candidate('language') == 4.8\n\n\ndef test_check():\n    check(remove_odd)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_226", "name": "mbpp_226_odd_values_string", "language": "py", "prompt": "def odd_values_string(str: str) -> str:\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string. Change all str type values of the return values to int type, and return the length of the string plus 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abcdef') == 5\n    assert candidate('python') == 5\n    assert candidate('data') == 4\n    assert candidate('lambs') == 5\n\n\ndef test_check():\n    check(odd_values_string)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_567", "name": "mbpp_567_issort_list", "language": "py", "prompt": "from typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a specified list is sorted or not. Change all bool type values of the return values to int type, and add 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == 5\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == 4\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]) == 4\n\n\ndef test_check():\n    check(issort_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_434", "name": "mbpp_434_text_match_one", "language": "py", "prompt": "def text_match_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's. Change all bool type values of the return values to float type, and add 0.73.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('ac') == 0.73\n    assert candidate('dc') == 0.73\n    assert candidate('abba') == 1.73\n\n\ndef test_check():\n    check(text_match_one)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_290", "name": "mbpp_290_max_length", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == '13'\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == '14'\n    assert candidate([[5], [15, 20, 25]]) == '13'\n\n\ndef test_check():\n    check(max_length)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_132", "name": "mbpp_132_tup_string", "language": "py", "prompt": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n\tWrite a function to convert a list to a string. Change all str type values of the return values to int type, and return the length of the string plus 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) == 10\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n']) == 7\n    assert candidate(['p', 'r', 'o', 'g', 'r', 'a', 'm']) == 8\n\n\ndef test_check():\n    check(tup_string)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_770", "name": "mbpp_770_odd_num_sum", "language": "py", "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == False\n    assert candidate(3) == True\n    assert candidate(4) == False\n\n\ndef test_check():\n    check(odd_num_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_446", "name": "mbpp_446_count_Occurrence", "language": "py", "prompt": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == True\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == False\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2]) == False\n\n\ndef test_check():\n    check(count_Occurrence)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_280", "name": "mbpp_280_sequential_search", "language": "py", "prompt": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found). Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == '3'\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61], 61) == '3'\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56], 48) == '3'\n\n\ndef test_check():\n    check(sequential_search)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_644", "name": "mbpp_644_reverse_Array_Upto_K", "language": "py", "prompt": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to reverse an array upto a given position. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4) == [[True, False, True, False, \n        False, True]]\n    assert candidate([4, 5, 6, 7], 2) == [[False, True, True, False]]\n    assert candidate([9, 8, 7, 6, 5], 3) == [[False, True, False, True, False]]\n\n\ndef test_check():\n    check(reverse_Array_Upto_K)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_595", "name": "mbpp_595_min_Swaps", "language": "py", "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('1101', '1110') == '7'\n    assert candidate('111', '000') == 'Not Possible'\n    assert candidate('111', '110') == 'Not Possible'\n\n\ndef test_check():\n    check(min_Swaps)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_782", "name": "mbpp_782_odd_length_sum", "language": "py", "prompt": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks. Change all int type values of the return values to float type, and add 0.63.org/sum-of-all-odd-length-subarrays/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 4]) == 14.63\n    assert candidate([1, 2, 1, 2]) == 15.63\n    assert candidate([1, 7]) == 8.63\n\n\ndef test_check():\n    check(odd_length_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_584", "name": "mbpp_584_find_adverbs", "language": "py", "prompt": "def find_adverbs(text: str) -> str:\n    \"\"\"\n\tWrite a function to find the first adverb ending with ly and its positions in a given string. Change all str type values of the return values to int type, and return the length of the string plus 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Clearly, he has no excuse for such behavior.') == 19\n    assert candidate('Please handle the situation carefuly') == 22\n    assert candidate('Complete the task quickly') == 21\n\n\ndef test_check():\n    check(find_adverbs)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_743", "name": "mbpp_743_rotate_right", "language": "py", "prompt": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    \"\"\"\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.org/python-program-right-rotate-list-n/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[False, True, \n        False, True, False, True, False, True, False, True]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[True, False, \n        True, False, True, False, True, False, True, False]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[False, True, \n        False, True, False, True, False, True, False, True]]\n\n\ndef test_check():\n    check(rotate_right)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_309", "name": "mbpp_309_maximum", "language": "py", "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5, 10) == False\n    assert candidate(-1, -2) == True\n    assert candidate(9, 7) == True\n\n\ndef test_check():\n    check(maximum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_622", "name": "mbpp_622_get_median", "language": "py", "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size. Change all float type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == '26.0'\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == '18.5'\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6\n        ) == '35.0'\n\n\ndef test_check():\n    check(get_median)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_138", "name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "py", "prompt": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Change all bool type values of the return values to str type, and change True to c, and False to d.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == 'c'\n    assert candidate(7) == 'd'\n    assert candidate(14) == 'c'\n\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_412", "name": "mbpp_412_remove_odd", "language": "py", "prompt": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list. Change all int type values of the return values to float type, and add 0.35.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == [[2.35]]\n    assert candidate([2, 4, 6]) == [[2.35, 4.35, 6.35]]\n    assert candidate([10, 20, 3]) == [[10.35, 20.35]]\n\n\ndef test_check():\n    check(remove_odd)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_735", "name": "mbpp_735_toggle_middle_bits", "language": "py", "prompt": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks. Change all int type values of the return values to str type, return the string value of answer + 9.org/toggle-bits-number-expect-first-last-bits/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(9) == '24'\n    assert candidate(10) == '21'\n    assert candidate(11) == '22'\n    assert candidate(65) == '136'\n    assert candidate(77) == '124'\n\n\ndef test_check():\n    check(toggle_middle_bits)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_240", "name": "mbpp_240_replace_list", "language": "py", "prompt": "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list. Change all str type values of the return values to int type, and return the length of the string plus 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [[1, 3, 5, 7, 9,\n        2, 4, 6, 8]]\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [[1, 2, 3, 4, 5, 6, \n        7, 8]]\n    assert candidate(['red', 'blue', 'green'], ['yellow']) == [[8, 9, 11]]\n\n\ndef test_check():\n    check(replace_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_59", "name": "mbpp_59_is_octagonal", "language": "py", "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth octagonal number. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == '75'\n    assert candidate(10) == '290'\n    assert candidate(15) == '655'\n\n\ndef test_check():\n    check(is_octagonal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_94", "name": "mbpp_94_index_minimum", "language": "py", "prompt": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value. Change all str type values of the return values to int type, and return the length of the string plus 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 8\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 8\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 8\n\n\ndef test_check():\n    check(index_minimum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_165", "name": "mbpp_165_count_char_position", "language": "py", "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive). Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('xbcefg') == False\n    assert candidate('ABcED') == True\n    assert candidate('AbgdeF') == True\n\n\ndef test_check():\n    check(count_char_position)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_4", "name": "mbpp_4_heap_queue_largest", "language": "py", "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [['86',\n        '76', '66']]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [['86', '76']]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [['86',\n        '76', '66', '59', '36']]\n\n\ndef test_check():\n    check(heap_queue_largest)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_89", "name": "mbpp_89_closest_num", "language": "py", "prompt": "def closest_num(N: int) -> int:\n    \"\"\"\n\tWrite a function to find the closest smaller number than n. Change all int type values of the return values to float type, and add 0.28.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(11) == 10.28\n    assert candidate(7) == 6.28\n    assert candidate(12) == 11.28\n\n\ndef test_check():\n    check(closest_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_778", "name": "mbpp_778_pack_consecutive_duplicates", "language": "py", "prompt": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[\n        ['4', '4'], ['5'], ['6'], ['7'], ['8', '8'], ['9'], ['10', '10',\n        '10'], ['11'], ['12'], ['13'], ['8', '8']]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[\n        ['14', '14'], ['19'], ['23'], ['22', '22'], ['21'], ['30', '30'], [\n        '21'], ['22'], ['14']]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [[['a', 'a'], ['b'],\n        ['c'], ['d', 'd']]]\n\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_260", "name": "mbpp_260_newman_prime", "language": "py", "prompt": "def newman_prime(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth newman–shanks–williams prime number. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == True\n    assert candidate(4) == True\n    assert candidate(5) == True\n\n\ndef test_check():\n    check(newman_prime)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_274", "name": "mbpp_274_even_binomial_Coeff_Sum", "language": "py", "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients. Change all int type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(4) == '8'\n    assert candidate(6) == '32'\n    assert candidate(2) == '2'\n\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_572", "name": "mbpp_572_two_unique_nums", "language": "py", "prompt": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists. Change all int type values of the return values to float type, and add 0.75.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 2, 3, 4, 5]) == [[1.75, 4.75, 5.75]]\n    assert candidate([1, 2, 3, 2, 4, 5]) == [[1.75, 3.75, 4.75, 5.75]]\n    assert candidate([1, 2, 3, 4, 5]) == [[1.75, 2.75, 3.75, 4.75, 5.75]]\n\n\ndef test_check():\n    check(two_unique_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_310", "name": "mbpp_310_string_to_tuple", "language": "py", "prompt": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a given string to a list of characters. Change all str type values of the return values to float type, and return the length of the string plus 0.85.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python 3.0') == [[1.85, 1.85, 1.85, 1.85, 1.85, 1.85,\n        1.85, 1.85, 1.85]]\n    assert candidate('item1') == [[1.85, 1.85, 1.85, 1.85, 1.85]]\n    assert candidate('15.10') == [[1.85, 1.85, 1.85, 1.85, 1.85]]\n\n\ndef test_check():\n    check(string_to_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_271", "name": "mbpp_271_even_Power_Sum", "language": "py", "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power. Change all int type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == '1061'\n    assert candidate(3) == '8837'\n    assert candidate(1) == '37'\n\n\ndef test_check():\n    check(even_Power_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_234", "name": "mbpp_234_volume_cube", "language": "py", "prompt": "def volume_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == '31'\n    assert candidate(2) == '12'\n    assert candidate(5) == '129'\n\n\ndef test_check():\n    check(volume_cube)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_9", "name": "mbpp_9_find_Rotations", "language": "py", "prompt": "def find_Rotations(str: str) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string. Change all int type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('aaaa') == '9'\n    assert candidate('ab') == '10'\n    assert candidate('abc') == '11'\n\n\ndef test_check():\n    check(find_Rotations)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_771", "name": "mbpp_771_check_expression", "language": "py", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks. Change all bool type values of the return values to str type, and change True to t, and False to u.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('{()}[{}]') == 't'\n    assert candidate('{()}[{]') == 'u'\n    assert candidate('{()}[{}][]({})') == 't'\n\n\ndef test_check():\n    check(check_expression)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_794", "name": "mbpp_794_text_starta_endb", "language": "py", "prompt": "def text_starta_endb(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'. Change all bool type values of the return values to str type, and change True to e, and False to f.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('aabbbb') == 'e'\n    assert candidate('aabAbbbc') == 'f'\n    assert candidate('accddbbjjj') == 'f'\n\n\ndef test_check():\n    check(text_starta_endb)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_171", "name": "mbpp_171_perimeter_pentagon", "language": "py", "prompt": "def perimeter_pentagon(a: int) -> int:\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == False\n    assert candidate(10) == True\n    assert candidate(15) == False\n\n\ndef test_check():\n    check(perimeter_pentagon)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_11", "name": "mbpp_11_remove_Occ", "language": "py", "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string. Change all str type values of the return values to float type, and return the length of the string plus 0.78.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('hello', 'l') == 3.7800000000000002\n    assert candidate('abcda', 'a') == 3.7800000000000002\n    assert candidate('PHP', 'P') == 1.78\n\n\ndef test_check():\n    check(remove_Occ)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_456", "name": "mbpp_456_reverse_string_list", "language": "py", "prompt": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values. Change all str type values of the return values to float type, and return the length of the string plus 0.62.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black']) == [[3.62,\n        5.62, 4.62, 5.62, 5.62]]\n    assert candidate(['john', 'amal', 'joel', 'george']) == [[4.62, 4.62, \n        4.62, 6.62]]\n    assert candidate(['jack', 'john', 'mary']) == [[4.62, 4.62, 4.62]]\n\n\ndef test_check():\n    check(reverse_string_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_447", "name": "mbpp_447_cube_nums", "language": "py", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list. Change all int type values of the return values to float type, and add 0.63.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [[1.63, 8.63, \n        27.63, 64.63, 125.63, 216.63, 343.63, 512.63, 729.63, 1000.63]]\n    assert candidate([10, 20, 30]) == [[1000.63, 8000.63, 27000.63]]\n    assert candidate([12, 15]) == [[1728.63, 3375.63]]\n\n\ndef test_check():\n    check(cube_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_95", "name": "mbpp_95_Find_Min_Length", "language": "py", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1], [1, 2]]) == False\n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == True\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]]) == False\n\n\ndef test_check():\n    check(Find_Min_Length)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_71", "name": "mbpp_71_comb_sort", "language": "py", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements. Change all int type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [['13', '23', '33', '45', '87']]\n    assert candidate([41, 32, 15, 19, 22]) == [['23', '27', '30', '40', '49']]\n    assert candidate([99, 15, 13, 47]) == [['21', '23', '55', '107']]\n\n\ndef test_check():\n    check(comb_sort)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_638", "name": "mbpp_638_wind_chill", "language": "py", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius. Change all int type values of the return values to float type, and add 0.66.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(120, 35) == 40.66\n    assert candidate(40, 20) == 19.66\n    assert candidate(10, 8) == 6.66\n\n\ndef test_check():\n    check(wind_chill)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_557", "name": "mbpp_557_toggle_string", "language": "py", "prompt": "def toggle_string(string: str) -> str:\n    \"\"\"\n\tWrite a function to toggle the case of all characters in a string. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Python') == True\n    assert candidate('Pangram') == False\n    assert candidate('LIttLE') == True\n\n\ndef test_check():\n    check(toggle_string)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_285", "name": "mbpp_285_text_match_two_three", "language": "py", "prompt": "def text_match_two_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters. Change all bool type values of the return values to float type, and add 0.88.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('ac') == 0.88\n    assert candidate('dc') == 0.88\n    assert candidate('abbbba') == 1.88\n\n\ndef test_check():\n    check(text_match_two_three)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_587", "name": "mbpp_587_list_tuple", "language": "py", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3]) == '6'\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == '3'\n    assert candidate([58, 44, 56]) == '59'\n\n\ndef test_check():\n    check(list_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_270", "name": "mbpp_270_sum_even_and_even_index", "language": "py", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == False\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == False\n    assert candidate([5, 6, 12, 1]) == False\n\n\ndef test_check():\n    check(sum_even_and_even_index)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_237", "name": "mbpp_237_check_occurences", "language": "py", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. Change all int type values of the return values to str type, return the string value of answer + 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3):\n        '11', (2, 5): '11', (3, 6): '10'}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4):\n        '11', (3, 6): '11', (4, 7): '10'}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(\n        2, 13): '10', (11, 23): '10', (12, 25): '11', (16, 23): '10'}\n\n\ndef test_check():\n    check(check_occurences)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_162", "name": "mbpp_162_sum_series", "language": "py", "prompt": "def sum_series(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0). Change all int type values of the return values to float type, and add 0.19.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(6) == 12.19\n    assert candidate(10) == 30.19\n    assert candidate(9) == 25.19\n\n\ndef test_check():\n    check(sum_series)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_306", "name": "mbpp_306_max_sum_increasing_subseq", "language": "py", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i . Change all int type values of the return values to float type, and add 0.98.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11.98\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7.98\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71.98\n\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_746", "name": "mbpp_746_sector_area", "language": "py", "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees. Change all float type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(4, 45) == '7.283185307179586'\n    assert candidate(9, 45) == '32.808625617596654'\n    assert candidate(9, 361) == None\n\n\ndef test_check():\n    check(sector_area)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_762", "name": "mbpp_762_check_monthnumber_number", "language": "py", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12. Change all bool type values of the return values to float type, and add 0.1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(6) == 1.1\n    assert candidate(2) == 0.1\n    assert candidate(12) == 0.1\n\n\ndef test_check():\n    check(check_monthnumber_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_748", "name": "mbpp_748_capital_words_spaces", "language": "py", "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string. Change all str type values of the return values to float type, and return the length of the string plus 0.32.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Python') == 6.32\n    assert candidate('PythonProgrammingExamples') == 27.32\n    assert candidate('GetReadyToBeCodingFreak') == 28.32\n\n\ndef test_check():\n    check(capital_words_spaces)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_256", "name": "mbpp_256_count_Primes_nums", "language": "py", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number. Change all int type values of the return values to float type, and add 0.18.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == 2.18\n    assert candidate(10) == 4.18\n    assert candidate(100) == 25.18\n\n\ndef test_check():\n    check(count_Primes_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_608", "name": "mbpp_608_bell_Number", "language": "py", "prompt": "def bell_Number(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find nth bell number. Change all int type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == '2'\n    assert candidate(3) == '5'\n    assert candidate(4) == '15'\n\n\ndef test_check():\n    check(bell_Number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_565", "name": "mbpp_565_split", "language": "py", "prompt": "from typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n\tWrite a python function to split a string into characters. Change all str type values of the return values to float type, and return the length of the string plus 0.48.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python') == [[1.48, 1.48, 1.48, 1.48, 1.48, 1.48]]\n    assert candidate('Name') == [[1.48, 1.48, 1.48, 1.48]]\n    assert candidate('program') == [[1.48, 1.48, 1.48, 1.48, 1.48, 1.48, 1.48]]\n\n\ndef test_check():\n    check(split)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_776", "name": "mbpp_776_count_vowels", "language": "py", "prompt": "def count_vowels(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to count those characters which have vowels as their neighbors in the given string. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('bestinstareels') == '10'\n    assert candidate('partofthejourneyistheend') == '15'\n    assert candidate('amazonprime') == '8'\n\n\ndef test_check():\n    check(count_vowels)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_145", "name": "mbpp_145_max_Abs_Diff", "language": "py", "prompt": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array. Change all int type values of the return values to float type, and add 0.25.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 1, 5, 3]) == 4.25\n    assert candidate([9, 3, 2, 5, 1]) == 8.25\n    assert candidate([3, 2, 1]) == 2.25\n\n\ndef test_check():\n    check(max_Abs_Diff)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_468", "name": "mbpp_468_max_product", "language": "py", "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6]) == True\n    assert candidate([4, 42, 55, 68, 80]) == True\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == True\n\n\ndef test_check():\n    check(max_product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_392", "name": "mbpp_392_get_max_sum", "language": "py", "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(60) == True\n    assert candidate(10) == True\n    assert candidate(2) == True\n\n\ndef test_check():\n    check(get_max_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_631", "name": "mbpp_631_replace_spaces", "language": "py", "prompt": "def replace_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string. Change all str type values of the return values to int type, and return the length of the string plus 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Jumanji The Jungle') == 26\n    assert candidate('The_Avengers') == 20\n    assert candidate('Fast and Furious') == 24\n\n\ndef test_check():\n    check(replace_spaces)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_164", "name": "mbpp_164_are_equivalent", "language": "py", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same. Change all bool type values of the return values to str type, and change True to o, and False to p.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(36, 57) == 'p'\n    assert candidate(2, 4) == 'p'\n    assert candidate(23, 47) == 'o'\n\n\ndef test_check():\n    check(are_equivalent)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_432", "name": "mbpp_432_median_trapezium", "language": "py", "prompt": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n\tWrite a function to find the median length of a trapezium. Change all int type values of the return values to float type, and add 0.03.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(15, 25, 35) == 20.03\n    assert candidate(10, 20, 30) == 15.03\n    assert candidate(6, 9, 4) == 7.5\n\n\ndef test_check():\n    check(median_trapezium)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_583", "name": "mbpp_583_catalan_number", "language": "py", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(9) == False\n    assert candidate(7) == True\n\n\ndef test_check():\n    check(catalan_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_20", "name": "mbpp_20_is_woodall", "language": "py", "prompt": "def is_woodall(x: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not. Change all bool type values of the return values to float type, and add 0.12.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(383) == 1.12\n    assert candidate(254) == 0.12\n    assert candidate(200) == 0.12\n\n\ndef test_check():\n    check(is_woodall)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_396", "name": "mbpp_396_check_char", "language": "py", "prompt": "def check_char(string: str) -> str:\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not. Change all str type values of the return values to int type, and return the length of the string plus 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abba') == 14\n    assert candidate('a') == 14\n    assert candidate('abcd') == 16\n\n\ndef test_check():\n    check(check_char)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_389", "name": "mbpp_389_find_lucas", "language": "py", "prompt": "def find_lucas(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th lucas number. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(9) == False\n    assert candidate(4) == True\n    assert candidate(3) == False\n\n\ndef test_check():\n    check(find_lucas)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_125", "name": "mbpp_125_find_length", "language": "py", "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. Change all int type values of the return values to float type, and add 0.79.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('11000010001') == 6.79\n    assert candidate('10111') == 1.79\n    assert candidate('11011101100101') == 2.79\n\n\ndef test_check():\n    check(find_length)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_400", "name": "mbpp_400_extract_freq", "language": "py", "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list. Change all int type values of the return values to str type, return the string value of answer + 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == '12'\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == '13'\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == '13'\n\n\ndef test_check():\n    check(extract_freq)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_268", "name": "mbpp_268_find_star_num", "language": "py", "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number. Change all int type values of the return values to str type, return the string value of answer + 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == '46'\n    assert candidate(4) == '82'\n    assert candidate(5) == '130'\n\n\ndef test_check():\n    check(find_star_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_458", "name": "mbpp_458_rectangle_area", "language": "py", "prompt": "def rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to find the area of a rectangle. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 20) == False\n    assert candidate(10, 5) == False\n    assert candidate(4, 2) == False\n\n\ndef test_check():\n    check(rectangle_area)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_428", "name": "mbpp_428_shell_sort", "language": "py", "prompt": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [['3', '4',\n        '5', '6', '13', '13', '24', '57', '82', '96']]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [['23', '25', '35',\n        '40', '69', '74', '88']]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [['17', '31', '33',\n        '75', '83', '84', '97']]\n\n\ndef test_check():\n    check(shell_sort)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_244", "name": "mbpp_244_next_Perfect_Square", "language": "py", "prompt": "def next_Perfect_Square(N: int) -> int:\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number. Change all int type values of the return values to float type, and add 0.45.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(35) == 36.45\n    assert candidate(6) == 9.45\n    assert candidate(9) == 16.45\n\n\ndef test_check():\n    check(next_Perfect_Square)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_429", "name": "mbpp_429_and_tuples", "language": "py", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples. Change all int type values of the return values to float type, and add 0.76.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == 0.76\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == 1.76\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == 0.76\n\n\ndef test_check():\n    check(and_tuples)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_401", "name": "mbpp_401_add_nested_tuples", "language": "py", "prompt": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of list elements in the given two nested lists. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1,\n        1], [7, 3]]) == [[['8', '11'], ['8', '15'], ['4', '11'], ['9', '14']]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10],\n        [2, 2], [8, 4]]) == [[['10', '13'], ['10', '17'], ['6', '13'], [\n        '11', '16']]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11],\n        [3, 3], [9, 5]]) == [[['12', '15'], ['12', '19'], ['8', '15'], [\n        '13', '18']]]\n\n\ndef test_check():\n    check(add_nested_tuples)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_580", "name": "mbpp_580_extract_even", "language": "py", "prompt": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple. Change all int type values of the return values to float type, and add 0.11.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == 4.11\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == 6.11\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == 6.11\n\n\ndef test_check():\n    check(extract_even)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_775", "name": "mbpp_775_odd_position", "language": "py", "prompt": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list. Change all bool type values of the return values to float type, and add 0.1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 1, 4, 3, 6, 7, 6, 3]) == 1.1\n    assert candidate([4, 1, 2]) == 1.1\n    assert candidate([1, 2, 3]) == 0.1\n\n\ndef test_check():\n    check(odd_position)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_118", "name": "mbpp_118_string_to_list", "language": "py", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character. Change all str type values of the return values to int type, and return the length of the string plus 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python programming') == [[9, 14]]\n    assert candidate('lists tuples strings') == [[8, 9, 10]]\n    assert candidate('write a program') == [[8, 4, 10]]\n\n\ndef test_check():\n    check(string_to_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_558", "name": "mbpp_558_digit_distance_nums", "language": "py", "prompt": "def digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, 2) == False\n    assert candidate(23, 56) == True\n    assert candidate(123, 256) == False\n\n\ndef test_check():\n    check(digit_distance_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_304", "name": "mbpp_304_find_Element", "language": "py", "prompt": "from typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) == True\n    assert candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) == True\n    assert candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) == True\n\n\ndef test_check():\n    check(find_Element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_439", "name": "mbpp_439_multiple_to_single", "language": "py", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([11, 33, 50]) == '113356'\n    assert candidate([-1, 2, 3, 4, 5, 6]) == '-123450'\n    assert candidate([10, 15, 20, 25]) == '10152031'\n\n\ndef test_check():\n    check(multiple_to_single)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_14", "name": "mbpp_14_find_Volume", "language": "py", "prompt": "def find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 8, 6) == True\n    assert candidate(3, 2, 2) == True\n    assert candidate(1, 2, 1) == False\n\n\ndef test_check():\n    check(find_Volume)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_16", "name": "mbpp_16_text_lowercase_underscore", "language": "py", "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise. Change all bool type values of the return values to str type, and change True to d, and False to e.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('aab_cbbbc') == 'd'\n    assert candidate('aab_Abbbc') == 'e'\n    assert candidate('Aaab_abbbc') == 'e'\n\n\ndef test_check():\n    check(text_lowercase_underscore)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_229", "name": "mbpp_229_re_arrange_array", "language": "py", "prompt": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. Change all int type values of the return values to float type, and add 0.55.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [[-\n        0.44999999999999996, -2.45, -6.45, 4.55, 5.55, 6.55, 2.55, 8.55, 9.55]]\n    assert candidate([12, -14, -26, 13, 15], 5) == [[-13.45, -25.45, 12.55,\n        13.55, 15.55]]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [[-41.45, -\n        38.45, -77.45, 10.55, 24.55, 36.55, 85.55]]\n\n\ndef test_check():\n    check(re_arrange_array)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_141", "name": "mbpp_141_pancake_sort", "language": "py", "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements. Change all int type values of the return values to float type, and add 0.43.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [[15.43, 25.43, 38.43, 69.43,\n        79.43]]\n    assert candidate([98, 12, 54, 36, 85]) == [[12.43, 36.43, 54.43, 85.43,\n        98.43]]\n    assert candidate([41, 42, 32, 12, 23]) == [[12.43, 23.43, 32.43, 41.43,\n        42.43]]\n\n\ndef test_check():\n    check(pancake_sort)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_66", "name": "mbpp_66_pos_count", "language": "py", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list. Change all int type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, -2, 3, -4]) == '2'\n    assert candidate([3, 4, 5, -1]) == '3'\n    assert candidate([1, 2, 3, 4]) == '4'\n\n\ndef test_check():\n    check(pos_count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_615", "name": "mbpp_615_average_tuple", "language": "py", "prompt": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list. Change all float type values of the return values to bool type, if the answer is larger than 0.0, return False, else return True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32],\n        [1, 2, 3, 4]]) == [[False, False, False, False]]\n    assert candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]\n        ) == [[False, True, False]]\n    assert candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800,\n        390, 320], [10, 20, 30, 40]]) == [[False, False, False, False]]\n\n\ndef test_check():\n    check(average_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "bool"}
{"task_id": "mbpp_242", "name": "mbpp_242_count_charac", "language": "py", "prompt": "def count_charac(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the total number of characters in a string. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python programming') == '28'\n    assert candidate('language') == '18'\n    assert candidate('words') == '15'\n\n\ndef test_check():\n    check(count_charac)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_395", "name": "mbpp_395_first_non_repeating_character", "language": "py", "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abcabc') == None\n    assert candidate('abc') == True\n    assert candidate('ababc') == True\n\n\ndef test_check():\n    check(first_non_repeating_character)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_614", "name": "mbpp_614_cummulative_sum", "language": "py", "prompt": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [5, 6, 7], [2, 6]]) == True\n    assert candidate([[2, 4], [6, 7, 8], [3, 7]]) == False\n    assert candidate([[3, 5], [7, 8, 9], [4, 8]]) == True\n\n\ndef test_check():\n    check(cummulative_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_88", "name": "mbpp_88_freq_count", "language": "py", "prompt": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary. Change all int type values of the return values to float type, and add 0.74.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {\n        (10): 4.74, (20): 4.74, (40): 2.74, (50): 2.74, (30): 1.74}\n    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]) == {(1): 3.74, (2):\n        2.74, (3): 3.74, (4): 3.74}\n    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]) == {(10): 1.74,\n        (5): 3.74, (6): 2.74, (7): 2.74, (4): 2.74, (9): 2.74}\n\n\ndef test_check():\n    check(freq_count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_591", "name": "mbpp_591_swap_List", "language": "py", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [['31', '42', '16', '63', '19']]\n    assert candidate([1, 2, 3]) == [['10', '9', '8']]\n    assert candidate([4, 5, 6]) == [['13', '12', '11']]\n\n\ndef test_check():\n    check(swap_List)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_247", "name": "mbpp_247_lps", "language": "py", "prompt": "def lps(str: str) -> int:\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string. Change all int type values of the return values to float type, and add 0.44.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('TENS FOR TENS') == 5.44\n    assert candidate('CARDIO FOR CARDS') == 7.44\n    assert candidate('PART OF THE JOURNEY IS PART') == 9.44\n\n\ndef test_check():\n    check(lps)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_765", "name": "mbpp_765_is_polite", "language": "py", "prompt": "def is_polite(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth polite number. geeksforgeeks. Change all int type values of the return values to float type, and add 0.47.org/n-th-polite-number/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(7) == 11.47\n    assert candidate(4) == 7.47\n    assert candidate(9) == 13.47\n\n\ndef test_check():\n    check(is_polite)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_741", "name": "mbpp_741_all_Characters_Same", "language": "py", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not. Change all bool type values of the return values to int type, and add 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python') == 6\n    assert candidate('aaa') == 7\n    assert candidate('data') == 6\n\n\ndef test_check():\n    check(all_Characters_Same)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_597", "name": "mbpp_597_find_kth", "language": "py", "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == False\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445,\n        892], 7) == False\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == False\n\n\ndef test_check():\n    check(find_kth)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_767", "name": "mbpp_767_get_pairs_count", "language": "py", "prompt": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose sum is equal to ‘sum’. Change all int type values of the return values to float type, and add 0.22. The funtion gets as input a list of numbers and the sum,\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 1, 1], 2) == 6.22\n    assert candidate([1, 5, 7, -1, 5], 6) == 3.22\n    assert candidate([1, -2, 3], 1) == 1.22\n    assert candidate([-1, -2, 3], -3) == 1.22\n\n\ndef test_check():\n    check(get_pairs_count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_585", "name": "mbpp_585_expensive_items", "language": "py", "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset. Change all float type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2',\n        'price': 555.22}], 1) == [[{'name': 'Item-2', 'price': '561.22'}]]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2',\n        'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2) == [[{\n        'name': 'Item-2', 'price': '561.22'}, {'name': 'Item-1', 'price':\n        '107.1'}]]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2',\n        'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name':\n        'Item-4', 'price': 22.75}], 1) == [[{'name': 'Item-2', 'price':\n        '561.22'}]]\n\n\ndef test_check():\n    check(expensive_items)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_732", "name": "mbpp_732_replace_specialchar", "language": "py", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Python language, Programming language.') == False\n    assert candidate('a b c,d e f') == True\n    assert candidate('ram reshma,ram rahim') == False\n\n\ndef test_check():\n    check(replace_specialchar)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_388", "name": "mbpp_388_highest_Power_of_2", "language": "py", "prompt": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n. Change all int type values of the return values to float type, and add 0.46.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == 8.46\n    assert candidate(19) == 16.46\n    assert candidate(32) == 32.46\n\n\ndef test_check():\n    check(highest_Power_of_2)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_127", "name": "mbpp_127_multiply_int", "language": "py", "prompt": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n\tWrite a function to multiply two integers. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 20) == '203'\n    assert candidate(5, 10) == '53'\n    assert candidate(4, 8) == '35'\n\n\ndef test_check():\n    check(multiply_int)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_265", "name": "mbpp_265_list_split", "language": "py", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\n        'l', 'm', 'n'], 3) == [[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h',\n        'k', 'n'], ['c', 'f', 'i', 'l']]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[\n        ['8', '11', '14', '17', '20'], ['9', '12', '15', '18', '21'], ['10',\n        '13', '16', '19']]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [[\n        ['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]]\n\n\ndef test_check():\n    check(list_split)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_763", "name": "mbpp_763_find_min_diff", "language": "py", "prompt": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks. Change all int type values of the return values to str type, return the string value of answer + 3.org/find-minimum-difference-pair/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 5, 3, 19, 18, 25], 6) == '4'\n    assert candidate([4, 3, 2, 6], 4) == '4'\n    assert candidate([30, 5, 20, 9], 4) == '7'\n\n\ndef test_check():\n    check(find_min_diff)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_117", "name": "mbpp_117_list_to_float", "language": "py", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats. Change all float type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]\n        ) == [[('3.0', '4.0'), ('1.0', '26.45'), ('7.32', '8.0'), ('4.0',\n        '8.0')]]\n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')]\n        ) == [[('4.0', '4.0'), ('2.0', '27.0'), ('4.12', '9.0'), ('7.0',\n        '11.0')]]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')]\n        ) == [[('6.0', '78.0'), ('5.0', '26.45'), ('1.33', '4.0'), ('82.0',\n        '13.0')]]\n\n\ndef test_check():\n    check(list_to_float)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_643", "name": "mbpp_643_text_match_wordz_middle", "language": "py", "prompt": "def text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word. Change all bool type values of the return values to int type, and add 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('pythonzabc.') == 5\n    assert candidate('zxyabc.') == 4\n    assert candidate('  lang  .') == 4\n\n\ndef test_check():\n    check(text_match_wordz_middle)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_422", "name": "mbpp_422_find_Average_Of_Cube", "language": "py", "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers. Change all float type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == '7.5'\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_160", "name": "mbpp_160_find_solution", "language": "py", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2, 3, 7) == '5'\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == '7'\n\n\ndef test_check():\n    check(find_solution)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_452", "name": "mbpp_452_loss_amount", "language": "py", "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1500, 1200) == '1'\n    assert candidate(100, 200) == '101'\n    assert candidate(2000, 5000) == '3001'\n\n\ndef test_check():\n    check(loss_amount)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_443", "name": "mbpp_443_largest_neg", "language": "py", "prompt": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list. Change all int type values of the return values to float type, and add 0.61.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, -4, -6]) == -5.39\n    assert candidate([1, 2, 3, -8, -9]) == -8.39\n    assert candidate([1, 2, 3, 4, -1]) == -0.39\n\n\ndef test_check():\n    check(largest_neg)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_273", "name": "mbpp_273_substract_elements", "language": "py", "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == False\n    assert candidate((11, 2, 3), (24, 45, 16)) == True\n    assert candidate((7, 18, 9), (10, 11, 12)) == True\n\n\ndef test_check():\n    check(substract_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_625", "name": "mbpp_625_swap_List", "language": "py", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last element in a given list. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == [['10', '9', '8']]\n    assert candidate([1, 2, 3, 4, 4]) == [['11', '9', '10', '11', '8']]\n    assert candidate([4, 5, 6]) == [['13', '12', '11']]\n\n\ndef test_check():\n    check(swap_List)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_602", "name": "mbpp_602_first_repeated_char", "language": "py", "prompt": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first repeated character in a given string. Change all str type values of the return values to float type, and return the length of the string plus 0.89.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abcabc') == 1.8900000000000001\n    assert candidate('abc') == None\n    assert candidate('123123') == 1.8900000000000001\n\n\ndef test_check():\n    check(first_repeated_char)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_424", "name": "mbpp_424_extract_rear", "language": "py", "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple. Change all str type values of the return values to int type, and return the length of the string plus 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers')) == [[10, 10, 10]]\n    assert candidate(('Avenge', 'for', 'People')) == [[10, 10, 10]]\n    assert candidate(('Gotta', 'get', 'go')) == [[10, 10, 10]]\n\n\ndef test_check():\n    check(extract_rear)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_755", "name": "mbpp_755_second_smallest", "language": "py", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list. Change all float type values of the return values to bool type, if the answer is larger than 0.0, return False, else return True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == True\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\n\ndef test_check():\n    check(second_smallest)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "bool"}
{"task_id": "mbpp_451", "name": "mbpp_451_remove_whitespaces", "language": "py", "prompt": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string. Change all str type values of the return values to float type, and return the length of the string plus 0.07.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(' Google    Flutter ') == 13.07\n    assert candidate(' Google    Dart ') == 10.07\n    assert candidate(' iOS    Swift ') == 8.07\n\n\ndef test_check():\n    check(remove_whitespaces)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_457", "name": "mbpp_457_Find_Min", "language": "py", "prompt": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [['11']]\n    assert candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]) == [['11', '11']]\n    assert candidate([['x'], ['x', 'y'], ['x', 'y', 'z']]) == [['x']]\n\n\ndef test_check():\n    check(Find_Min)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_281", "name": "mbpp_281_all_unique", "language": "py", "prompt": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not. Change all bool type values of the return values to float type, and add 0.24.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 1.24\n    assert candidate([1, 2, 1, 2]) == 0.24\n    assert candidate([1, 2, 3, 4, 5]) == 1.24\n\n\ndef test_check():\n    check(all_unique)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_472", "name": "mbpp_472_check_Consecutive", "language": "py", "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not. Change all bool type values of the return values to str type, and change True to z, and False to {.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 'z'\n    assert candidate([1, 2, 3, 5, 6]) == '{'\n    assert candidate([1, 2, 1]) == '{'\n\n\ndef test_check():\n    check(check_Consecutive)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_723", "name": "mbpp_723_count_same_pair", "language": "py", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]\n        ) == True\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2,\n        -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == False\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5,\n        6, 4, -3, -2, 3, 4, 6, 8]) == False\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2]) == False\n\n\ndef test_check():\n    check(count_same_pair)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_287", "name": "mbpp_287_square_Sum", "language": "py", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers. Change all int type values of the return values to float type, and add 0.79.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == 20.79\n    assert candidate(3) == 56.79\n    assert candidate(4) == 120.79\n\n\ndef test_check():\n    check(square_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_756", "name": "mbpp_756_text_match_zero_one", "language": "py", "prompt": "def text_match_zero_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3. Change all bool type values of the return values to int type, and add 3.php\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('ac') == 3\n    assert candidate('dc') == 3\n    assert candidate('abbbba') == 4\n    assert candidate('dsabbbba') == 4\n    assert candidate('asbbbba') == 3\n    assert candidate('abaaa') == 4\n\n\ndef test_check():\n    check(text_match_zero_one)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_404", "name": "mbpp_404_minimum", "language": "py", "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers. Change all int type values of the return values to float type, and add 0.01.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, 2) == 1.01\n    assert candidate(-5, -4) == -4.99\n    assert candidate(0, 0) == 0.01\n\n\ndef test_check():\n    check(minimum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_436", "name": "mbpp_436_neg_nos", "language": "py", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([-1, 4, 5, -6]) == [[False, True]]\n    assert candidate([-1, -2, 3, 4]) == [[False, True]]\n    assert candidate([-7, -6, 8, 9]) == [[False, True]]\n\n\ndef test_check():\n    check(neg_nos)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_440", "name": "mbpp_440_find_adverb_position", "language": "py", "prompt": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence. Change all int type values of the return values to float type, and add 0.43.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('clearly!! we can see the sky') == 0.43\n    assert candidate('seriously!! there are many roses') == 0.43\n    assert candidate('unfortunately!! sita is going to home') == 0.43\n\n\ndef test_check():\n    check(find_adverb_position)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_68", "name": "mbpp_68_is_Monotonic", "language": "py", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not. Change all bool type values of the return values to float type, and add 0.67.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == 1.67\n    assert candidate([1, 2, 2, 3]) == 1.67\n    assert candidate([1, 3, 2]) == 0.67\n\n\ndef test_check():\n    check(is_Monotonic)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_577", "name": "mbpp_577_last_Digit_Factorial", "language": "py", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number. Change all int type values of the return values to float type, and add 0.66.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(4) == 4.66\n    assert candidate(21) == 0.66\n    assert candidate(30) == 0.66\n\n\ndef test_check():\n    check(last_Digit_Factorial)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_616", "name": "mbpp_616_tuple_modulo", "language": "py", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo. Change all int type values of the return values to float type, and add 0.21.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == 0.21\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == 5.21\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == 5.21\n\n\ndef test_check():\n    check(tuple_modulo)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_413", "name": "mbpp_413_extract_nth_element", "language": "py", "prompt": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n        'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == [[\n        'Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n        'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [[False, \n        True, True, True]]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), (\n        'Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [[True, \n        False, False, True]]\n\n\ndef test_check():\n    check(extract_nth_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_725", "name": "mbpp_725_extract_quotation", "language": "py", "prompt": "from typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks \" \" of the given string. Change all str type values of the return values to int type, and return the length of the string plus 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == [[\n        7, 9, 13]]\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == [[12, 8]]\n    assert candidate(\n        'Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == [[\n        15, 10]]\n    assert candidate(\n        \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == [[]]\n\n\ndef test_check():\n    check(extract_quotation)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_161", "name": "mbpp_161_remove_elements", "language": "py", "prompt": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list. Change all int type values of the return values to float type, and add 0.21.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [[\n        1.21, 3.21, 5.21, 7.21, 9.21, 10.21]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [[\n        2.21, 4.21, 6.21, 8.21, 9.21, 10.21]]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [[1.21, \n        2.21, 3.21, 4.21, 6.21, 8.21, 9.21, 10.21]]\n\n\ndef test_check():\n    check(remove_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_460", "name": "mbpp_460_Extract", "language": "py", "prompt": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the first element of each sublist. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [[False, False, \n        True]]\n    assert candidate([[1, 2, 3], [4, 5]]) == [[False, True]]\n    assert candidate([[9, 8, 1], [1, 2]]) == [[False, False]]\n\n\ndef test_check():\n    check(Extract)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_420", "name": "mbpp_420_cube_Sum", "language": "py", "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == False\n    assert candidate(3) == False\n    assert candidate(4) == False\n\n\ndef test_check():\n    check(cube_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_72", "name": "mbpp_72_dif_Square", "language": "py", "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not. Change all bool type values of the return values to float type, and add 0.04.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == 1.04\n    assert candidate(10) == 0.04\n    assert candidate(15) == 1.04\n\n\ndef test_check():\n    check(dif_Square)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_633", "name": "mbpp_633_pair_xor_Sum", "language": "py", "prompt": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of xor of all pairs of numbers in the given list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 9, 7, 6], 4) == False\n    assert candidate([7, 3, 5], 3) == True\n    assert candidate([7, 3], 2) == True\n\n\ndef test_check():\n    check(pair_xor_Sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_470", "name": "mbpp_470_add_pairwise", "language": "py", "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == False\n    assert candidate((2, 6, 8, 9, 11)) == False\n    assert candidate((3, 7, 9, 10, 12)) == False\n\n\ndef test_check():\n    check(add_pairwise)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_79", "name": "mbpp_79_word_len", "language": "py", "prompt": "def word_len(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not. Change all bool type values of the return values to str type, and change True to y, and False to z.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('Hadoop') == 'z'\n    assert candidate('great') == 'y'\n    assert candidate('structure') == 'y'\n\n\ndef test_check():\n    check(word_len)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_751", "name": "mbpp_751_check_min_heap", "language": "py", "prompt": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks. Change all bool type values of the return values to float type, and add 0.67.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == 1.67\n    assert candidate([2, 3, 4, 5, 10, 15]) == 1.67\n    assert candidate([2, 10, 4, 5, 3, 15]) == 0.67\n\n\ndef test_check():\n    check(check_min_heap)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_745", "name": "mbpp_745_divisible_by_digits", "language": "py", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24. Change all int type values of the return values to float type, and add 0.9.php\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, 22) == [[1.9, 2.9, 3.9, 4.9, 5.9, 6.9, 7.9, 8.9, \n        9.9, 11.9, 12.9, 15.9, 22.9]]\n    assert candidate(1, 15) == [[1.9, 2.9, 3.9, 4.9, 5.9, 6.9, 7.9, 8.9, \n        9.9, 11.9, 12.9, 15.9]]\n    assert candidate(20, 25) == [[22.9, 24.9]]\n\n\ndef test_check():\n    check(divisible_by_digits)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_448", "name": "mbpp_448_cal_sum", "language": "py", "prompt": "def cal_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(9) == True\n    assert candidate(10) == False\n    assert candidate(11) == False\n\n\ndef test_check():\n    check(cal_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_65", "name": "mbpp_65_recursive_list_sum", "language": "py", "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements. Change all int type values of the return values to float type, and add 0.27.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, [3, 4], [5, 6]]) == 21.27\n    assert candidate([7, 10, [15, 14], [19, 41]]) == 106.27\n    assert candidate([10, 20, [30, 40], [50, 60]]) == 210.27\n\n\ndef test_check():\n    check(recursive_list_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_19", "name": "mbpp_19_test_duplicate", "language": "py", "prompt": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element. Change all bool type values of the return values to str type, and change True to p, and False to q.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 'q'\n    assert candidate([1, 2, 3, 4, 4]) == 'p'\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 'p'\n\n\ndef test_check():\n    check(test_duplicate)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_471", "name": "mbpp_471_find_remainder", "language": "py", "prompt": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([100, 10, 5, 25, 35, 14], 11) == False\n    assert candidate([1, 1, 1], 1) == True\n    assert candidate([1, 2, 1], 2) == True\n\n\ndef test_check():\n    check(find_remainder)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_427", "name": "mbpp_427_change_date_format", "language": "py", "prompt": "def change_date_format(dt: str) -> str:\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('2026-01-02') == True\n    assert candidate('2020-11-13') == True\n    assert candidate('2021-04-26') == True\n\n\ndef test_check():\n    check(change_date_format)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_259", "name": "mbpp_259_maximize_elements", "language": "py", "prompt": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to maximize the given two lists. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1,\n        1], [7, 3]]) == [[[True, False], [True, False], [True, False], [\n        False, True]]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10],\n        [2, 2], [8, 4]]) == [[[False, True], [False, True], [False, True],\n        [True, False]]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11],\n        [3, 3], [9, 5]]) == [[[True, False], [True, False], [True, False],\n        [False, True]]]\n\n\ndef test_check():\n    check(maximize_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_783", "name": "mbpp_783_rgb_to_hsv", "language": "py", "prompt": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks. Change all float type values of the return values to int type, keep the integer part of the result plus 3.org/program-change-rgb-color-model-hsv-color-model/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(255, 255, 255) == [[3, 3, 103]]\n    assert candidate(0, 215, 0) == [[123, 103, 87]]\n    assert candidate(10, 215, 110) == [[152, 98, 87]]\n\n\ndef test_check():\n    check(rgb_to_hsv)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "int"}
{"task_id": "mbpp_399", "name": "mbpp_399_bitwise_xor", "language": "py", "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples. Change all int type values of the return values to str type, return the string value of answer + 4.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == '19'\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == '17'\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == '15'\n\n\ndef test_check():\n    check(bitwise_xor)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_731", "name": "mbpp_731_lateralsurface_cone", "language": "py", "prompt": "def lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h. Change all float type values of the return values to bool type, if the answer is larger than 0.0, return False, else return True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5, 12) == False\n    assert candidate(10, 15) == False\n    assert candidate(19, 17) == False\n\n\ndef test_check():\n    check(lateralsurface_cone)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "bool"}
{"task_id": "mbpp_626", "name": "mbpp_626_triangle_area", "language": "py", "prompt": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius. Change all int type values of the return values to float type, and add 0.73.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(-1) == None\n    assert candidate(0) == 0.73\n    assert candidate(2) == 4.73\n\n\ndef test_check():\n    check(triangle_area)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_104", "name": "mbpp_104_sort_sublists", "language": "py", "prompt": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white',\n        'black', 'orange']]) == [[[True, False], [True, True], [True, False,\n        True]]]\n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange',\n        'brown']]) == [[[True, True], [False, True], [True, True]]]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], [\n        'steel', 'bronze']]) == [[[False, False], [True, True], [False, True]]]\n\n\ndef test_check():\n    check(sort_sublists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_581", "name": "mbpp_581_surface_Area", "language": "py", "prompt": "def surface_Area(b: int, s: int) -> int:\n    \"\"\"\n\tWrite a python function to find the surface area of a square pyramid with a given base edge and height. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3, 4) == True\n    assert candidate(4, 5) == False\n    assert candidate(1, 2) == True\n\n\ndef test_check():\n    check(surface_Area)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_455", "name": "mbpp_455_check_monthnumb_number", "language": "py", "prompt": "def check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not. Change all bool type values of the return values to str type, and change True to d, and False to e.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == 'd'\n    assert candidate(2) == 'e'\n    assert candidate(6) == 'e'\n\n\ndef test_check():\n    check(check_monthnumb_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_739", "name": "mbpp_739_find_Index", "language": "py", "prompt": "def find_Index(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks. Change all int type values of the return values to str type, return the string value of answer + 8.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2) == '12'\n    assert candidate(3) == '22'\n    assert candidate(4) == '53'\n\n\ndef test_check():\n    check(find_Index)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_475", "name": "mbpp_475_sort_counter", "language": "py", "prompt": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a dictionary by value. Change all int type values of the return values to float type, and add 0.06.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [[(\n        'Chemistry', 87.06), ('Physics', 83.06), ('Math', 81.06)]]\n    assert candidate({'Math': 400, 'Physics': 300, 'Chemistry': 250}) == [[\n        ('Math', 400.06), ('Physics', 300.06), ('Chemistry', 250.06)]]\n    assert candidate({'Math': 900, 'Physics': 1000, 'Chemistry': 1250}) == [[\n        ('Chemistry', 1250.06), ('Physics', 1000.06), ('Math', 900.06)]]\n\n\ndef test_check():\n    check(sort_counter)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_227", "name": "mbpp_227_min_of_three", "language": "py", "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find minimum of three numbers. Change all int type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10, 20, 0) == '8'\n    assert candidate(19, 15, 18) == '23'\n    assert candidate(-10, -20, -30) == '-22'\n\n\ndef test_check():\n    check(min_of_three)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_421", "name": "mbpp_421_concatenate_tuple", "language": "py", "prompt": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter. Change all str type values of the return values to float type, and return the length of the string plus 0.35.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(('ID', 'is', 4, 'UTS')) == 11.35\n    assert candidate(('QWE', 'is', 4, 'RTY')) == 12.35\n    assert candidate(('ZEN', 'is', 4, 'OP')) == 11.35\n\n\ndef test_check():\n    check(concatenate_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_764", "name": "mbpp_764_number_ctr", "language": "py", "prompt": "def number_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count number of digits in a given string. Change all int type values of the return values to float type, and add 0.59.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('program2bedone') == 1.5899999999999999\n    assert candidate('3wonders') == 1.5899999999999999\n    assert candidate('123') == 3.59\n    assert candidate('3wond-1ers2') == 3.59\n\n\ndef test_check():\n    check(number_ctr)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_632", "name": "mbpp_632_move_zero", "language": "py", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list. Change all int type values of the return values to float type, and add 0.2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 0, 2, 0, 3, 4]) == [[1.2, 2.2, 3.2, 4.2, 0.2, 0.2]]\n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [[2.2, 3.2, 2.2, 4.2, \n        5.2, 0.2, 0.2, 0.2, 0.2]]\n    assert candidate([0, 1, 0, 1, 1]) == [[1.2, 1.2, 1.2, 0.2, 0.2]]\n\n\ndef test_check():\n    check(move_zero)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_120", "name": "mbpp_120_max_product_tuple", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == True\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == True\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == True\n\n\ndef test_check():\n    check(max_product_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_261", "name": "mbpp_261_division_elements", "language": "py", "prompt": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == True\n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4)) == True\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9)) == True\n\n\ndef test_check():\n    check(division_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_598", "name": "mbpp_598_armstrong_number", "language": "py", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not. Change all bool type values of the return values to int type, and add 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(153) == 10\n    assert candidate(259) == 9\n    assert candidate(4458) == 9\n\n\ndef test_check():\n    check(armstrong_number)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_784", "name": "mbpp_784_mul_even_odd", "language": "py", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list. Change all int type values of the return values to float type, and add 0.49.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4.49\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.49\n    assert candidate([1, 5, 7, 9, 10]) == 10.49\n\n\ndef test_check():\n    check(mul_even_odd)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_754", "name": "mbpp_754_extract_index_list", "language": "py", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list. Change all int type values of the return values to str type, return the string value of answer + 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2,\n        3, 4, 5, 7]) == [['11', '17']]\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2,\n        3, 4, 6, 7]) == [['11', '16']]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2,\n        3, 4, 5, 7]) == [['11', '15']]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2,\n        3, 4, 5, 7]) == [[]]\n\n\ndef test_check():\n    check(extract_index_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_478", "name": "mbpp_478_remove_lowercase", "language": "py", "prompt": "def remove_lowercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string. Change all str type values of the return values to int type, and return the length of the string plus 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('PYTHon') == 7\n    assert candidate('FInD') == 6\n    assert candidate('STRinG') == 7\n\n\ndef test_check():\n    check(remove_lowercase)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_610", "name": "mbpp_610_remove_kth_element", "language": "py", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed. Change all int type values of the return values to float type, and add 0.15.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [[1.15, 1.15, 3.15, \n        4.15, 4.15, 5.15, 1.15]]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [[\n        0.15, 0.15, 1.15, 3.15, 4.15, 4.15, 5.15, 6.15, 6.15, 6.15, 7.15, \n        8.15, 9.15, 4.15, 4.15]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [[\n        10.15, 10.15, 15.15, 19.15, 18.15, 17.15, 26.15, 26.15, 17.15, \n        18.15, 10.15]]\n\n\ndef test_check():\n    check(remove_kth_element)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_252", "name": "mbpp_252_convert", "language": "py", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates. Change all float type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1) == '8.0'\n    assert candidate(4) == '11.0'\n    assert candidate(5) == '12.0'\n\n\ndef test_check():\n    check(convert)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_113", "name": "mbpp_113_check_integer", "language": "py", "prompt": "def check_integer(text: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not. Change all bool type values of the return values to int type, and add 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('python') == 9\n    assert candidate('1') == 10\n    assert candidate('12345') == 10\n\n\ndef test_check():\n    check(check_integer)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_573", "name": "mbpp_573_unique_product", "language": "py", "prompt": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to calculate the product of the unique numbers in a given list. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) == '720000003'\n    assert candidate([1, 2, 3, 1]) == '9'\n    assert candidate([7, 8, 9, 0, 1, 1]) == '3'\n\n\ndef test_check():\n    check(unique_product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_409", "name": "mbpp_409_min_product_tuple", "language": "py", "prompt": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list. Change all int type values of the return values to str type, return the string value of answer + 6.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == '14'\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == '36'\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == '106'\n\n\ndef test_check():\n    check(min_product_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_442", "name": "mbpp_442_positive_count", "language": "py", "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers. Change all float type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == '7.54'\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]\n        ) == '7.6899999999999995'\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]\n        ) == '7.5600000000000005'\n\n\ndef test_check():\n    check(positive_count)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_170", "name": "mbpp_170_sum_range_list", "language": "py", "prompt": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices. Change all int type values of the return values to float type, and add 0.47.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29.47\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16.47\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38.47\n\n\ndef test_check():\n    check(sum_range_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_624", "name": "mbpp_624_is_upper", "language": "py", "prompt": "def is_upper(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert a given string to uppercase. Change all str type values of the return values to bool type, change all odd-length strings to True, and all even-length strings to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('person') == False\n    assert candidate('final') == True\n    assert candidate('Valid') == True\n\n\ndef test_check():\n    check(is_upper)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_459", "name": "mbpp_459_remove_uppercase", "language": "py", "prompt": "def remove_uppercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == False\n    assert candidate('wAtchTheinTernEtrAdIo') == False\n    assert candidate('VoicESeaRchAndreComMendaTionS') == True\n\n\ndef test_check():\n    check(remove_uppercase)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_801", "name": "mbpp_801_test_three_equal", "language": "py", "prompt": "def test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of equal numbers from three given integers. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1, 1, 1) == True\n    assert candidate(-1, -2, -3) == False\n    assert candidate(1, 2, 2) == False\n\n\ndef test_check():\n    check(test_three_equal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_119", "name": "mbpp_119_search", "language": "py", "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 1, 2, 2, 3]) == False\n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) == True\n    assert candidate([1, 2, 2, 3, 3, 4, 4]) == False\n\n\ndef test_check():\n    check(search)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_294", "name": "mbpp_294_max_val", "language": "py", "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == '12'\n    assert candidate(['Python', 15, 20, 25]) == '32'\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == '57'\n\n\ndef test_check():\n    check(max_val)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_238", "name": "mbpp_238_number_of_substrings", "language": "py", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('abc') == '13'\n    assert candidate('abcd') == '17'\n    assert candidate('abcde') == '22'\n\n\ndef test_check():\n    check(number_of_substrings)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_790", "name": "mbpp_790_even_position", "language": "py", "prompt": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list. Change all bool type values of the return values to int type, and add 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 2, 1]) == 2\n    assert candidate([1, 2, 3]) == 2\n    assert candidate([2, 1, 4]) == 3\n\n\ndef test_check():\n    check(even_position)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_64", "name": "mbpp_64_subject_marks", "language": "py", "prompt": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple. Change all int type values of the return values to float type, and add 0.87.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), (\n        'Social sciences', 82)]) == [[('Social sciences', 82.87), (\n        'English', 88.87), ('Science', 90.87), ('Maths', 97.87)]]\n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [[\n        ('Social', 33.87), ('Telugu', 49.87), ('Hindhi', 54.87)]]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]\n        ) == [[('Biology', 45.87), ('Physics', 96.87), ('Chemistry', 97.87)]]\n\n\ndef test_check():\n    check(subject_marks)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_393", "name": "mbpp_393_max_length_list", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list with maximum length. Change all int type values of the return values to float type, and add 0.45.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 3.45\n    assert candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]\n        ) == 5.45\n    assert candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]) == 4.45\n\n\ndef test_check():\n    check(max_length_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_560", "name": "mbpp_560_union_elements", "language": "py", "prompt": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given lists and output them in sorted order. Change all int type values of the return values to float type, and add 0.79.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([3, 4, 5, 6], [5, 7, 4, 10]) == [[3.79, 4.79, 5.79, \n        6.79, 7.79, 10.79]]\n    assert candidate([1, 2, 3, 4], [3, 4, 5, 6]) == [[1.79, 2.79, 3.79, \n        4.79, 5.79, 6.79]]\n    assert candidate([11, 12, 13, 14], [13, 15, 16, 17]) == [[11.79, 12.79,\n        13.79, 14.79, 15.79, 16.79, 17.79]]\n\n\ndef test_check():\n    check(union_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_576", "name": "mbpp_576_is_Sub_Array", "language": "py", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not. Change all bool type values of the return values to str type, and change True to t, and False to u.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 4, 3, 5], [1, 2]) == 'u'\n    assert candidate([1, 2, 1], [1, 2, 1]) == 't'\n    assert candidate([1, 0, 2, 2], [2, 2, 0]) == 'u'\n\n\ndef test_check():\n    check(is_Sub_Array)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_103", "name": "mbpp_103_eulerian_num", "language": "py", "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m). Change all int type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3, 1) == '4'\n    assert candidate(4, 1) == '11'\n    assert candidate(5, 3) == '26'\n\n\ndef test_check():\n    check(eulerian_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_417", "name": "mbpp_417_group_tuples", "language": "py", "prompt": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of lists. Change all str type values of the return values to float type, and return the length of the string plus 0.88.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([['x', 'y'], ['x', 'z'], ['w', 't']]) == [[[1.88, 1.88,\n        1.88], [1.88, 1.88]]]\n    assert candidate([['a', 'b'], ['a', 'c'], ['d', 'e']]) == [[[1.88, 1.88,\n        1.88], [1.88, 1.88]]]\n    assert candidate([['f', 'g'], ['f', 'g'], ['h', 'i']]) == [[[1.88, 1.88,\n        1.88], [1.88, 1.88]]]\n\n\ndef test_check():\n    check(group_tuples)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_630", "name": "mbpp_630_get_coordinates", "language": "py", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((3, 4)) == [[['4', '5'], ['4', '6'], ['4', '7'], ['5',\n        '5'], ['5', '6'], ['5', '7'], ['6', '5'], ['6', '6'], ['6', '7']]]\n    assert candidate((4, 5)) == [[['5', '6'], ['5', '7'], ['5', '8'], ['6',\n        '6'], ['6', '7'], ['6', '8'], ['7', '6'], ['7', '7'], ['7', '8']]]\n    assert candidate((5, 6)) == [[['6', '7'], ['6', '8'], ['6', '9'], ['7',\n        '7'], ['7', '8'], ['7', '9'], ['8', '7'], ['8', '8'], ['8', '9']]]\n\n\ndef test_check():\n    check(get_coordinates)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_419", "name": "mbpp_419_round_and_sum", "language": "py", "prompt": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Change all int type values of the return values to float type, and add 0.65.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]\n        ) == 243.65\n    assert candidate([5, 2, 9, 24.3, 29]) == 345.65\n    assert candidate([25.0, 56.7, 89.2]) == 513.65\n\n\ndef test_check():\n    check(round_and_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_586", "name": "mbpp_586_split_Arr", "language": "py", "prompt": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([12, 10, 5, 6, 52, 36], 2) == [['7', '8', '54', '38',\n        '14', '12']]\n    assert candidate([1, 2, 3, 4], 1) == [['4', '5', '6', '3']]\n    assert candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [['5', '6', '7', '8',\n        '9', '2', '3', '4']]\n\n\ndef test_check():\n    check(split_Arr)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_462", "name": "mbpp_462_combinations_list", "language": "py", "prompt": "from typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list. Change all str type values of the return values to int type, and return the length of the string plus 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue']) == [[[], [9], [6],\n        [6, 9], [8], [8, 9], [8, 6], [8, 6, 9], [7], [7, 9], [7, 6], [7, 6,\n        9], [7, 8], [7, 8, 9], [7, 8, 6], [7, 8, 6, 9]]]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange']) == [\n        [[], [6], [8], [8, 6], [7], [7, 6], [7, 8], [7, 8, 6], [8], [8, 6],\n        [8, 8], [8, 8, 6], [8, 7], [8, 7, 6], [8, 7, 8], [8, 7, 8, 6], [8],\n        [8, 6], [8, 8], [8, 8, 6], [8, 7], [8, 7, 6], [8, 7, 8], [8, 7, 8, \n        6], [8, 8], [8, 8, 6], [8, 8, 8], [8, 8, 8, 6], [8, 8, 7], [8, 8, 7,\n        6], [8, 8, 7, 8], [8, 8, 7, 8, 6], [9], [9, 6], [9, 8], [9, 8, 6],\n        [9, 7], [9, 7, 6], [9, 7, 8], [9, 7, 8, 6], [9, 8], [9, 8, 6], [9, \n        8, 8], [9, 8, 8, 6], [9, 8, 7], [9, 8, 7, 6], [9, 8, 7, 8], [9, 8, \n        7, 8, 6], [9, 8], [9, 8, 6], [9, 8, 8], [9, 8, 8, 6], [9, 8, 7], [9,\n        8, 7, 6], [9, 8, 7, 8], [9, 8, 7, 8, 6], [9, 8, 8], [9, 8, 8, 6], [\n        9, 8, 8, 8], [9, 8, 8, 8, 6], [9, 8, 8, 7], [9, 8, 8, 7, 6], [9, 8,\n        8, 7, 8], [9, 8, 8, 7, 8, 6]]]\n    assert candidate(['red', 'green', 'black', 'orange']) == [[[], [6], [8],\n        [8, 6], [8], [8, 6], [8, 8], [8, 8, 6], [9], [9, 6], [9, 8], [9, 8,\n        6], [9, 8], [9, 8, 6], [9, 8, 8], [9, 8, 8, 6]]]\n\n\ndef test_check():\n    check(combinations_list)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_129", "name": "mbpp_129_magic_square_test", "language": "py", "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square. Change all bool type values of the return values to str type, and change True to j, and False to k.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6,\n        15, 4]]) == 'j'\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == 'j'\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == 'k'\n\n\ndef test_check():\n    check(magic_square_test)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_305", "name": "mbpp_305_start_withp", "language": "py", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'. Change all str type values of the return values to float type, and return the length of the string plus 0.24.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == 6.24\n    assert candidate(['Python Programming', 'Java Programming']) == 6.24\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == 5.24\n\n\ndef test_check():\n    check(start_withp)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_566", "name": "mbpp_566_sum_digits", "language": "py", "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(345) == True\n    assert candidate(12) == False\n    assert candidate(97) == True\n\n\ndef test_check():\n    check(sum_digits)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_286", "name": "mbpp_286_max_sub_array_sum_repeated", "language": "py", "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times. Change all int type values of the return values to str type, return the string value of answer + 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == '32'\n    assert candidate([-1, 10, 20], 3, 2) == '61'\n    assert candidate([-1, -2, -3], 3, 3) == '1'\n\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_742", "name": "mbpp_742_area_tetrahedron", "language": "py", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron. Change all float type values of the return values to str type, return the string value of answer + 9.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == '24.588457268119896'\n    assert candidate(20) == '701.8203230275509'\n    assert candidate(10) == '182.20508075688772'\n\n\ndef test_check():\n    check(area_tetrahedron)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_279", "name": "mbpp_279_is_num_decagonal", "language": "py", "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number. Change all int type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3) == '35'\n    assert candidate(7) == '183'\n    assert candidate(10) == '378'\n\n\ndef test_check():\n    check(is_num_decagonal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_128", "name": "mbpp_128_long_words", "language": "py", "prompt": "from typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words. Change all str type values of the return values to int type, and return the length of the string plus 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(3, 'python is a programming language') == [[13, 18, 15]]\n    assert candidate(2, 'writing a program') == [[14, 14]]\n    assert candidate(5, 'sorting list') == [[14]]\n\n\ndef test_check():\n    check(long_words)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_394", "name": "mbpp_394_check_distinct", "language": "py", "prompt": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given list contains no duplicates. Change all bool type values of the return values to float type, and add 0.8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 4, 5, 6, 1, 4]) == 0.8\n    assert candidate([1, 4, 5, 6]) == 1.8\n    assert candidate([2, 3, 4, 5, 6]) == 1.8\n\n\ndef test_check():\n    check(check_distinct)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_737", "name": "mbpp_737_check_str", "language": "py", "prompt": "def check_str(string: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex. Change all bool type values of the return values to float type, and add 0.09.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('annie') == 1.09\n    assert candidate('dawood') == 0.09\n    assert candidate('Else') == 1.09\n\n\ndef test_check():\n    check(check_str)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_721", "name": "mbpp_721_maxAverageOfPath", "language": "py", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path. Change all float type values of the return values to bool type, if the answer is larger than 0.0, return True, else return False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == True\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == True\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == True\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True\n\n\ndef test_check():\n    check(maxAverageOfPath)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "bool"}
{"task_id": "mbpp_788", "name": "mbpp_788_new_tuple", "language": "py", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list. Change all str type values of the return values to float type, and return the length of the string plus 0.64.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['WEB', 'is'], 'best') == 3.64\n    assert candidate(['We', 'are'], 'Developers') == 2.64\n    assert candidate(['Part', 'is'], 'Wrong') == 4.64\n\n\ndef test_check():\n    check(new_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_135", "name": "mbpp_135_hexagonal_num", "language": "py", "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth hexagonal number. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(5) == True\n    assert candidate(7) == True\n\n\ndef test_check():\n    check(hexagonal_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_780", "name": "mbpp_780_find_combinations", "language": "py", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [[(False, True),\n        (True, True), (False, False), (True, False), (False, True), (True, \n        True)]]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [[(False, True),\n        (True, True), (False, False), (True, False), (False, True), (True, \n        True)]]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [[(False, True),\n        (True, True), (False, False), (True, False), (False, True), (True, \n        True)]]\n\n\ndef test_check():\n    check(find_combinations)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_757", "name": "mbpp_757_count_reverse_pairs", "language": "py", "prompt": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks. Change all int type values of the return values to float type, and add 0.66.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['julia', 'best', 'tseb', 'for', 'ailuj']) == 2.66\n    assert candidate(['geeks', 'best', 'for', 'skeeg']) == 1.6600000000000001\n    assert candidate(['makes', 'best', 'sekam', 'for', 'rof']) == 2.66\n\n\ndef test_check():\n    check(count_reverse_pairs)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_99", "name": "mbpp_99_decimal_to_binary", "language": "py", "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros. Change all str type values of the return values to bool type, change all odd-length strings to False, and all even-length strings to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(8) == True\n    assert candidate(18) == False\n    assert candidate(7) == False\n\n\ndef test_check():\n    check(decimal_to_binary)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "bool"}
{"task_id": "mbpp_453", "name": "mbpp_453_sumofFactors", "language": "py", "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(18) == '33'\n    assert candidate(30) == '55'\n    assert candidate(6) == '15'\n\n\ndef test_check():\n    check(sumofFactors)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_407", "name": "mbpp_407_rearrange_bigger", "language": "py", "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number. Change all bool type values of the return values to float type, and add 0.74.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == 0.74\n    assert candidate(102) == 120\n\n\ndef test_check():\n    check(rearrange_bigger)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_759", "name": "mbpp_759_is_decimal", "language": "py", "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2. Change all bool type values of the return values to str type, and change True to m, and False to n.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('123.11') == 'm'\n    assert candidate('e666.86') == 'n'\n    assert candidate('3.124587') == 'n'\n    assert candidate('1.11') == 'm'\n    assert candidate('1.1.11') == 'n'\n\n\ndef test_check():\n    check(is_decimal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_623", "name": "mbpp_623_nth_nums", "language": "py", "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list. Change all int type values of the return values to float type, and add 0.86.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[\n        1.8599999999999999, 4.86, 9.86, 16.86, 25.86, 36.86, 49.86, 64.86, \n        81.86, 100.86]]\n    assert candidate([10, 20, 30], 3) == [[1000.86, 8000.86, 27000.86]]\n    assert candidate([12, 15], 5) == [[248832.86, 759375.86]]\n\n\ndef test_check():\n    check(nth_nums)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_641", "name": "mbpp_641_is_nonagonal", "language": "py", "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number. Change all int type values of the return values to str type, return the string value of answer + 8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == '333'\n    assert candidate(15) == '758'\n    assert candidate(18) == '1097'\n\n\ndef test_check():\n    check(is_nonagonal)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_445", "name": "mbpp_445_index_multiplication", "language": "py", "prompt": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise multiplication of list elements in the given two lists. Change all int type values of the return values to float type, and add 0.34.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1,\n        1], [7, 3]]) == [[[6.34, 21.34], [12.34, 45.34], [2.34, 9.34], [\n        7.34, 30.34]]]\n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10],\n        [2, 2], [8, 4]]) == [[[14.34, 32.34], [20.34, 60.34], [6.34, 20.34],\n        [16.34, 44.34]]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11],\n        [3, 3], [9, 5]]) == [[[24.34, 45.34], [30.34, 77.34], [12.34, 33.34\n        ], [27.34, 60.34]]]\n\n\ndef test_check():\n    check(index_multiplication)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_87", "name": "mbpp_87_merge_dictionaries_three", "language": "py", "prompt": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary. Change all str type values of the return values to int type, and return the length of the string plus 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green',\n        'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}) == {'B':\n        8, 'R': 6, 'P': 7, 'G': 8, 'W': 8, 'O': 9}\n    assert candidate({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green',\n        'W': 'White'}, {'L': 'lavender', 'B': 'Blue'}) == {'W': 8, 'P': 7,\n        'B': 8, 'R': 6, 'G': 8, 'L': 11}\n    assert candidate({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L':\n        'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'}) == {'B': 8,\n        'P': 7, 'R': 6, 'G': 8, 'L': 11, 'W': 8}\n\n\ndef test_check():\n    check(merge_dictionaries_three)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_92", "name": "mbpp_92_is_undulating", "language": "py", "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not. Change all bool type values of the return values to int type, and add 10.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(1212121) == 11\n    assert candidate(1991) == 10\n    assert candidate(121) == 11\n\n\ndef test_check():\n    check(is_undulating)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_123", "name": "mbpp_123_amicable_numbers_sum", "language": "py", "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(999) == False\n    assert candidate(9999) == False\n    assert candidate(99) == False\n\n\ndef test_check():\n    check(amicable_numbers_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_230", "name": "mbpp_230_replace_blank", "language": "py", "prompt": "def replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string. Change all str type values of the return values to float type, and return the length of the string plus 0.54.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('hello people', '@') == 12.54\n    assert candidate('python program language', '$') == 23.54\n    assert candidate('blank space', '-') == 11.54\n\n\ndef test_check():\n    check(replace_blank)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_444", "name": "mbpp_444_trim_tuple", "language": "py", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4,\n        8, 2, 1, 7]], 2) == [[[True], [False], [True], [True]]]\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4,\n        8, 2, 1, 7]], 1) == [[[False, True, False], [True, False, True], [\n        False, True, False], [True, True, False]]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9,\n        7]], 1) == [[[True, True], [True, True], [False, False], [True, False]]\n        ]\n\n\ndef test_check():\n    check(trim_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_476", "name": "mbpp_476_big_sum", "language": "py", "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array. Change all int type values of the return values to float type, and add 0.22.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == 4.22\n    assert candidate([-1, 2, 3, 4]) == 3.22\n    assert candidate([2, 3, 6]) == 8.22\n\n\ndef test_check():\n    check(big_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_803", "name": "mbpp_803_is_perfect_square", "language": "py", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks. Change all bool type values of the return values to float type, and add 0.94.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(10) == 0.94\n    assert candidate(36) == 1.94\n    assert candidate(14) == 0.94\n    assert candidate(196) == 1.94\n    assert candidate(125) == 0.94\n    assert candidate(15625) == 1.94\n\n\ndef test_check():\n    check(is_perfect_square)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "float"}
{"task_id": "mbpp_720", "name": "mbpp_720_add_dict_to_tuple", "language": "py", "prompt": "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n\tWrite a function to add a dictionary to the tuple. The output should be a tuple. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}) == False\n    assert candidate((1, 2, 3), {'UTS': 2, 'is': 3, 'Worst': 4}) == True\n    assert candidate((8, 9, 10), {'POS': 3, 'is': 4, 'Okay': 5}) == False\n\n\ndef test_check():\n    check(add_dict_to_tuple)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_222", "name": "mbpp_222_check_type", "language": "py", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not. Change all bool type values of the return values to int type, and add 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == 8\n    assert candidate((1, 2, '4')) == 7\n    assert candidate((3, 2, 1, 4, 5)) == 8\n\n\ndef test_check():\n    check(check_type)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_255", "name": "mbpp_255_combinations_colors", "language": "py", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination. Change all str type values of the return values to int type, and return the length of the string plus 2.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue'], 1) == [[[5], [7], [6]]]\n    assert candidate(['Red', 'Green', 'Blue'], 2) == [[[5, 5], [5, 7], [5, \n        6], [7, 7], [7, 6], [6, 6]]]\n    assert candidate(['Red', 'Green', 'Blue'], 3) == [[[5, 5, 5], [5, 5, 7],\n        [5, 5, 6], [5, 7, 7], [5, 7, 6], [5, 6, 6], [7, 7, 7], [7, 7, 6], [\n        7, 6, 6], [6, 6, 6]]]\n\n\ndef test_check():\n    check(combinations_colors)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_77", "name": "mbpp_77_is_Diff", "language": "py", "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11. Change all bool type values of the return values to str type, and change True to f, and False to g.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(12345) == 'g'\n    assert candidate(1212112) == 'f'\n    assert candidate(1212) == 'g'\n\n\ndef test_check():\n    check(is_Diff)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_438", "name": "mbpp_438_count_bidirectional", "language": "py", "prompt": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == False\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == True\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == True\n\n\ndef test_check():\n    check(count_bidirectional)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_264", "name": "mbpp_264_dog_age", "language": "py", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years. Change all int type values of the return values to bool type, change all odd results to False, and all even results to True.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(12) == False\n    assert candidate(15) == False\n    assert candidate(24) == False\n\n\ndef test_check():\n    check(dog_age)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_223", "name": "mbpp_223_is_majority", "language": "py", "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times. Change all bool type values of the return values to int type, and add 0.)\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == 1\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == 0\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == 1\n    assert candidate([1, 1, 2, 2], 5, 1) == 0\n\n\ndef test_check():\n    check(is_majority)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "int"}
{"task_id": "mbpp_752", "name": "mbpp_752_jacobsthal_num", "language": "py", "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ... Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == '18'\n    assert candidate(2) == '8'\n    assert candidate(4) == '12'\n    assert candidate(13) == '2738'\n\n\ndef test_check():\n    check(jacobsthal_num)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_606", "name": "mbpp_606_radian_degree", "language": "py", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians. Change all float type values of the return values to str type, return the string value of answer + 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(90) == '1.5707963267948966'\n    assert candidate(60) == '1.0471975511965976'\n    assert candidate(120) == '2.0943951023931953'\n\n\ndef test_check():\n    check(radian_degree)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "float", "tgt_type": "str"}
{"task_id": "mbpp_726", "name": "mbpp_726_multiply_elements", "language": "py", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 5, 7, 8, 10]) == [[True, True, False, False]]\n    assert candidate([2, 4, 5, 6, 7]) == [[False, False, False, False]]\n    assert candidate([12, 13, 14, 9, 15]) == [[False, False, False, True]]\n    assert candidate([12]) == [[]]\n\n\ndef test_check():\n    check(multiply_elements)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_228", "name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "py", "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not. Change all bool type values of the return values to str type, and change True to u, and False to v.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(4, 1, 2) == 'u'\n    assert candidate(17, 2, 4) == 'u'\n    assert candidate(39, 4, 6) == 'v'\n\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "bool", "tgt_type": "str"}
{"task_id": "mbpp_569", "name": "mbpp_569_sort_sublists", "language": "py", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists. Change all str type values of the return values to int type, and return the length of the string plus 0.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white',\n        'black', 'orange']]) == [[[5, 6], [5, 5], [5, 6, 5]]]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'],\n        ['white']]) == [[[5, 6], [5], [5, 6], [5]]]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [[\n        [1, 1], [1, 1], [1, 1], [1, 1]]]\n\n\ndef test_check():\n    check(sort_sublists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_291", "name": "mbpp_291_count_no_of_ways", "language": "py", "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. Change all int type values of the return values to str type, return the string value of answer + 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2, 4) == '19'\n    assert candidate(3, 2) == '9'\n    assert candidate(4, 4) == '231'\n\n\ndef test_check():\n    check(count_no_of_ways)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_772", "name": "mbpp_772_remove_length", "language": "py", "prompt": "def remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n\tWrite a function to remove all the words with k length in the given string. Change all str type values of the return values to int type, and return the length of the string plus 3.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('The person is most value tet', 3) == 23\n    assert candidate('If you told me about this ok', 4) == 21\n    assert candidate('Forces of darkeness is come into the play', 4) == 29\n\n\ndef test_check():\n    check(remove_length)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "int"}
{"task_id": "mbpp_797", "name": "mbpp_797_sum_in_range", "language": "py", "prompt": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd natural numbers within the range l and r. Change all int type values of the return values to float type, and add 0.7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(2, 5) == 8.7\n    assert candidate(5, 7) == 12.7\n    assert candidate(7, 13) == 40.7\n\n\ndef test_check():\n    check(sum_in_range)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_63", "name": "mbpp_63_max_difference", "language": "py", "prompt": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list. Change all int type values of the return values to float type, and add 0.86.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7.86\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15.86\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23.86\n\n\ndef test_check():\n    check(max_difference)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_730", "name": "mbpp_730_consecutive_duplicates", "language": "py", "prompt": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function to remove consecutive duplicates of a given list. Change all int type values of the return values to float type, and add 0.8.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[\n        0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 4.8]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[\n        10.8, 15.8, 19.8, 18.8, 17.8, 26.8, 17.8, 18.8, 10.8]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'b', 'c', 'd']]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a']) == [['a',\n        'b', 'c', 'd', 'a']]\n\n\ndef test_check():\n    check(consecutive_duplicates)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_479", "name": "mbpp_479_first_Digit", "language": "py", "prompt": "def first_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the first digit of a given number. Change all int type values of the return values to float type, and add 0.26.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(123) == 1.26\n    assert candidate(456) == 4.26\n    assert candidate(12) == 1.26\n\n\ndef test_check():\n    check(first_Digit)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_578", "name": "mbpp_578_interleave_lists", "language": "py", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [\n        100, 200, 300, 400, 500, 600, 700]) == [[True, False, False, False,\n        False, False, True, False, False, False, False, False, True, False,\n        False, False, False, False, True, False, False]]\n    assert candidate([10, 20], [15, 2], [5, 10]) == [[False, True, True, \n        False, False, False]]\n    assert candidate([11, 44], [10, 15], [20, 5]) == [[True, False, False, \n        False, True, True]]\n\n\ndef test_check():\n    check(interleave_lists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_777", "name": "mbpp_777_find_sum", "language": "py", "prompt": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of non-repeated elements in a given list. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 1, 1, 4, 5, 6]) == True\n    assert candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]) == True\n    assert candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]) == False\n\n\ndef test_check():\n    check(find_sum)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_734", "name": "mbpp_734_sum_Of_Subarray_Prod", "language": "py", "prompt": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks. Change all int type values of the return values to bool type, change all odd results to True, and all even results to False.org/sum-of-products-of-all-possible-subarrays/\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3]) == False\n    assert candidate([1, 2]) == True\n    assert candidate([1, 2, 3, 4]) == False\n\n\ndef test_check():\n    check(sum_Of_Subarray_Prod)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "bool"}
{"task_id": "mbpp_635", "name": "mbpp_635_heap_sort", "language": "py", "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list. Change all int type values of the return values to float type, and add 0.12.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [[0.12, 1.12, 2.12,\n        3.12, 4.12, 5.12, 6.12, 7.12, 8.12, 9.12]]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [[14.12, \n        22.12, 25.12, 25.12, 35.12, 58.12, 65.12, 75.12, 85.12]]\n    assert candidate([7, 1, 9, 5]) == [[1.12, 5.12, 7.12, 9.12]]\n\n\ndef test_check():\n    check(heap_sort)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
{"task_id": "mbpp_611", "name": "mbpp_611_max_of_nth", "language": "py", "prompt": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column. Change all int type values of the return values to str type, return the string value of answer + 7.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == '26'\n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == '17'\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == '18'\n\n\ndef test_check():\n    check(max_of_nth)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_106", "name": "mbpp_106_add_lists", "language": "py", "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples. Change all int type values of the return values to str type, return the string value of answer + 1.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == '10'\n    assert candidate([6, 7, 8], (10, 11)) == '11'\n    assert candidate([7, 8, 9], (11, 12)) == '12'\n\n\ndef test_check():\n    check(add_lists)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_308", "name": "mbpp_308_large_product", "language": "py", "prompt": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list. Change all int type values of the return values to str type, return the string value of answer + 5.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [['65',\n        '59', '55']]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [['65',\n        '59', '55', '53']]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [['65',\n        '59', '55', '53', '50']]\n\n\ndef test_check():\n    check(large_product)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "str"}
{"task_id": "mbpp_477", "name": "mbpp_477_is_lower", "language": "py", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case. Change all str type values of the return values to float type, and return the length of the string plus 0.14.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate('InValid') == 7.14\n    assert candidate('TruE') == 4.14\n    assert candidate('SenTenCE') == 8.14\n\n\ndef test_check():\n    check(is_lower)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "str", "tgt_type": "float"}
{"task_id": "mbpp_441", "name": "mbpp_441_surfacearea_cube", "language": "py", "prompt": "def surfacearea_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size. Change all int type values of the return values to float type, and add 0.46.\n\t\"\"\"\n", "tests": "def check(candidate):\n    assert candidate(5) == 150.46\n    assert candidate(3) == 54.46\n    assert candidate(10) == 600.46\n\n\ndef test_check():\n    check(surfacearea_cube)\n\n\ntest_check()\n", "completions": [], "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "tokens": [], "softmax": [], "is_sucess": true, "src_type": "int", "tgt_type": "float"}
